{
"-": {
"prefix" : "-",
"body": [
"(– ${1:[number} ${2:number]} ${3:&rest})"
],
"description":" #+prefix: autolisp\n 将第一个数减去其他数的和并返回差值"
},
"~": {
"prefix" : "~",
"body": [
"(~ ${1:int})"
],
"description":"返回参数的按位非（即 1 的补码）"
},
"+": {
"prefix" : "+",
"body": [
"(+ ${1:[number} ${2:number]} ${3:&rest})"
],
"description":"返回所有数的和"
},
"=": {
"prefix" : "=",
"body": [
"(= ${1:numstr} ${2:[numstr]} ${3:&rest})"
],
"description":"比较参数是否相等"
},
"乘积": {
"prefix" : "乘积",
"body": [
"(* ${1:[number} ${2:number]} ${3:&rest})"
],
"description":"返回所有数的乘积"
},
"/": {
"prefix" : "/",
"body": [
"(/ ${1:[number} ${2:number]} ${3:&rest})"
],
"description":"将第一个数除以其他数的乘积并返回商"
},
"1+": {
"prefix" : "1+",
"body": [
"(1+ ${1:number})"
],
"description":"将参数加 1"
},
"<": {
"prefix" : "<",
"body": [
"(< ${1:numstr} ${2:[numstr]} ${3:&rest})"
],
"description":"如果每个参数值都小于它右边的参数则返回 T，否则返回 nil"
},
"<=": {
"prefix" : "<=",
"body": [
"(<= ${1:numstr} ${2:[numstr]} ${3:&rest})"
],
"description":"如果每个参数值都小于或等于它右边的参数则返回 T，否则返回 nil"
},
">": {
"prefix" : ">",
"body": [
"(> ${1:numstr} ${2:[numstr]} ${3:&rest})"
],
"description":"如果每个参数值都大于它右边的参数则返回 T，否则返回 nil"
},
">=": {
"prefix" : ">=",
"body": [
"(>= ${1:numstr} ${2:[numstr]} ${3:&rest})"
],
"description":"如果每个参数值都大于或等于它右边的参数则返回 T，否则返回 nil"
},
"abs": {
"prefix" : "abs",
"body": [
"(abs ${1:number})"
],
"description":"返回参数的绝对值"
},
"acad_colordlg": {
"prefix" : "acad_colordlg",
"body": [
"(acad_colordlg ${1:colornum} ${2:[flag]})"
],
"description":"显示标准的 AutoCAD 颜色选择对话框"
},
"acad_helpdlg": {
"prefix" : "acad_helpdlg",
"body": [
"(acad_helpdlg ${1:helpfile} ${2:topic})"
],
"description":"启动帮助工具（已废弃）"
},
"acad_strlsort": {
"prefix" : "acad_strlsort",
"body": [
"(acad_strlsort ${1:list})"
],
"description":"以ASCII码字母顺序对字符串表进行排序"
},
"action_tile": {
"prefix" : "action_tile",
"body": [
"(action_tile ${1:key} ${2:action-expression})"
],
"description":"为某一对话框控件指定一个动作表达式，用户在对话框中选中这个控件时，就会执行该动作表达式"
},
"add_list": {
"prefix" : "add_list",
"body": [
"(add_list ${1:string})"
],
"description":"在当前激活的对话框的列表框中增加一个字符串或修改其中的一个字符串"
},
"ads": {
"prefix" : "ads",
"body": [
"(ads)"
],
"description":"此函数将返回一串目前装入的AutoCAD高级开发系统(ADS)应用程序。每一个应用程序和它的路径在这个表中都是一个以引号括起来的字符串。"
},
"alert": {
"prefix" : "alert",
"body": [
"(alert ${1:string})"
],
"description":"显示一个警告框，其中显示一条出错或警告信息"
},
"alloc": {
"prefix" : "alloc",
"body": [
"(alloc ${1:n-alloc})"
],
"description":"设置段长度以供 expand 函数使用"
},
"and": {
"prefix" : "and",
"body": [
"(and ${1:[expr} ${2:&rest]})"
],
"description":"返回表达式的逻辑与 (AND) 运算结果"
},
"angle": {
"prefix" : "angle",
"body": [
"(angle ${1:pt1} ${2:pt2})"
],
"description":"以弧度为单位返回两点之间连线与当前 UCS 下 X 轴之间的夹角"
},
"angtof": {
"prefix" : "angtof",
"body": [
"(angtof ${1:string} ${2:[units]})"
],
"description":"将表示角度的字符串转换为实数（浮点数）形式的弧度值"
},
"angtos": {
"prefix" : "angtos",
"body": [
"(angtos ${1:angle} ${2:[unit} ${3:[precision]]})"
],
"description":"将一个以弧度为单位的角度值转换成字符串"
},
"append": {
"prefix" : "append",
"body": [
"(append ${1:[list} ${2:&rest]})"
],
"description":"将任意多个表组合成一个表"
},
"apply": {
"prefix" : "apply",
"body": [
"(apply ${1:(quote function)} ${2:list})"
],
"description":"传递一个列表作为指定函数的参数，并执行该函数\n 详见： https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E8%BF%9B%E9%98%B6/lisp.org"
},
"函数arx": {
"prefix" : "函数arx",
"body": [
"(arx)"
],
"description":"此函数将返回一个目前已装入的 ARX 应用程序的表。"
},
"arxload": {
"prefix" : "arxload",
"body": [
"(arxload ${1:application} ${2:[onfailure]})"
],
"description":"加载 ObjectARX 应用程序"
},
"arxunload": {
"prefix" : "arxunload",
"body": [
"(arxunload ${1:application} ${2:[onfailure]})"
],
"description":"卸载 ObjectARX 应用程序"
},
"ascii": {
"prefix" : "ascii",
"body": [
"(ascii ${1:string})"
],
"description":"将字符串中的第一个字符转换成其 ASCII 码(整数)后返回"
},
"assoc": {
"prefix" : "assoc",
"body": [
"(assoc ${1:element} ${2:alist})"
],
"description":"从关联表中搜索一个元素，如果找到则返回该关联表条目\n 详见：\n https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org"
},
"atan": {
"prefix" : "atan",
"body": [
"(atan ${1:num1} ${2:[num2]})"
],
"description":"返回一个数的反正切值（以弧度为单位）"
},
"atof": {
"prefix" : "atof",
"body": [
"(atof ${1:string})"
],
"description":"将一个字符串转换成实数"
},
"atoi": {
"prefix" : "atoi",
"body": [
"(atoi ${1:string})"
],
"description":"将一个字符串转换成整数"
},
"atom": {
"prefix" : "atom",
"body": [
"(atom ${1:item})"
],
"description":"验证一个项是否是原子"
},
"autoarxload": {
"prefix" : "autoarxload",
"body": [
"(autoarxload ${1:filename} ${2:cmdlist})"
],
"description":"预定义可自动加载某相关 ObjectARX 应用程序的命令名"
},
"autoload": {
"prefix" : "autoload",
"body": [
"(autoload ${1:filename} ${2:cmdlist})"
],
"description":"预定义可自动加载某相关 AutoLISP 应用程序的命令名"
},
"autoxload": {
"prefix" : "autoxload",
"body": [
"(autoxload ${1:filename} ${2:cmdlist})"
],
"description":"此函数是事先定义命令名称来装入一已连接的 ADS 应用程序。"
},
"/=": {
"prefix" : "/=",
"body": [
"(/= ${1:numstr} ${2:[numstr]} ${3:&rest})"
],
"description":"比较参数是否值不相等"
},
"boole": {
"prefix" : "boole",
"body": [
"(boole ${1:operator} ${2:int1} ${3:[int2} ${4:&rest]})"
],
"description":"11123,用作一个通用的按位逻辑运算函数"
},
"boundp": {
"prefix" : "boundp",
"body": [
"(boundp ${1:sym})"
],
"description":"检验符号是否被设置为某个值"
},
"car": {
"prefix" : "car",
"body": [
"(car ${1:list})"
],
"description":"返回表的第一个元素"
},
"cdr": {
"prefix" : "cdr",
"body": [
"(cdr ${1:list})"
],
"description":"返回去掉了第一个元素的表或点对表的第二个元素"
},
"chr": {
"prefix" : "chr",
"body": [
"(chr ${1:integer})"
],
"description":"将代表字符 ASCII 码的整数转换成包含相应的单一字符的字符串"
},
"client_data_tile": {
"prefix" : "client_data_tile",
"body": [
"(client_data_tile ${1:key} ${2:clientdata})"
],
"description":"将特定应用数据与一个对话框控件相关联"
},
"函数close": {
"prefix" : "函数close",
"body": [
"(close ${1:file-desc})"
],
"description":"关闭一个已打开的文件"
},
"command": {
"prefix" : "command",
"body": [
"(command ${1:[arguments]} ${2:&rest})"
],
"description":"执行一条 AutoCAD 命令"
},
"cond": {
"prefix" : "cond",
"body": [
"(cond ${1:[} ${2:(test result &rest)} ${3:&rest]})"
],
"description":"多条件、多处理结果函数\n 详见：\n https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org"
},
"cons": {
"prefix" : "cons",
"body": [
"(cons ${1:new-first-element} ${2:list-or-atom})"
],
"description":"向表的头部添加一个元素，或构造一个点对\n 详见：\n https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org"
},
"cos": {
"prefix" : "cos",
"body": [
"(cos ${1:ang})"
],
"description":"返回弧度角度的余弦值"
},
"cvunit": {
"prefix" : "cvunit",
"body": [
"(cvunit ${1:value} ${2:from-unit} ${3:to-unit})"
],
"description":"在不同测量单位之间进行换算"
},
"defun": {
"prefix" : "defun",
"body": [
"(defun ${1:sym} ${2:([arguments] [/ variables &rest])} ${3:expr} ${4:&rest})"
],
"description":"定义函数\n 详见：\n https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org"
},
"dictadd": {
"prefix" : "dictadd",
"body": [
"(dictadd ${1:ename} ${2:symbol} ${3:newobj})"
],
"description":"在指定词典内添加非图形对象"
},
"dictnext": {
"prefix" : "dictnext",
"body": [
"(dictnext ${1:ename} ${2:[rewind]})"
],
"description":"查找词典中的下一个条目"
},
"dictremove": {
"prefix" : "dictremove",
"body": [
"(dictremove ${1:ename} ${2:symbol})"
],
"description":"从指定词典中删除一个条目"
},
"dictrename": {
"prefix" : "dictrename",
"body": [
"(dictrename ${1:ename} ${2:oldsym} ${3:newsym})"
],
"description":"重命名词典条目"
},
"dictsearch": {
"prefix" : "dictsearch",
"body": [
"(dictsearch ${1:ename} ${2:symbol} ${3:[setnext]})"
],
"description":"在词典中搜索某个项"
},
"dimx_tile": {
"prefix" : "dimx_tile",
"body": [
"(dimx_tile ${1:key})"
],
"description":"返回控件的宽度"
},
"dimy_tile": {
"prefix" : "dimy_tile",
"body": [
"(dimy_tile ${1:key})"
],
"description":"返回控件的高度"
},
"函数distance": {
"prefix" : "函数distance",
"body": [
"(distance ${1:pt1} ${2:pt2})"
],
"description":"返回两个点之间的距离"
},
"distof": {
"prefix" : "distof",
"body": [
"(distof ${1:string} ${2:[mode]})"
],
"description":"将一个表示实（浮点）数的字符串转换成一个实数"
},
"done_dialog": {
"prefix" : "done_dialog",
"body": [
"(done_dialog ${1:[status]})"
],
"description":"中断对话框"
},
"end_image": {
"prefix" : "end_image",
"body": [
"(end_image)"
],
"description":"结束当前激活的对话框图像控件的操作"
},
"end_list": {
"prefix" : "end_list",
"body": [
"(end_list)"
],
"description":"结束对当前激活的对话框列表的操作"
},
"entdel": {
"prefix" : "entdel",
"body": [
"(entdel ${1:ename})"
],
"description":"删除对象（图元）或恢复先前删除的对象"
},
"entget": {
"prefix" : "entget",
"body": [
"(entget ${1:ename} ${2:[applist]})"
],
"description":"获得对象（图元）的定义数据"
},
"entlast": {
"prefix" : "entlast",
"body": [
"(entlast)"
],
"description":"返回图形中最后那个未删除的主对象（图元）名称"
},
"entmake": {
"prefix" : "entmake",
"body": [
"(entmake ${1:[elist]})"
],
"description":"在图形中创建一个新图元"
},
"entmakex": {
"prefix" : "entmakex",
"body": [
"(entmakex ${1:[elist]})"
],
"description":"创建一个新对象或图元，赋给它一个句柄和图元名（但不指定所有者)\n 并返回新图元的名称"
},
"entmod": {
"prefix" : "entmod",
"body": [
"(entmod ${1:elist})"
],
"description":"修改对象（图元）的定义数据"
},
"entnext": {
"prefix" : "entnext",
"body": [
"(entnext ${1:[ename]})"
],
"description":"如果调用entnext时没有参数，则返回数据库中第一个未删除实体的实体名。如果向entnext提供了一个ename参数，则函数返回数据库中ename后面第一个未删除实体的实体名。如果数据库中没有下一个实体，则返回nil。entnext函数返回主实体和子实体。"
},
"entsel": {
"prefix" : "entsel",
"body": [
"(entsel ${1:[msg]})"
],
"description":"提示用户通过指定一个点来选择单个对象（图元）"
},
"entupd": {
"prefix" : "entupd",
"body": [
"(entupd ${1:ename})"
],
"description":"更新对象（图元）的屏幕显示"
},
"eq": {
"prefix" : "eq",
"body": [
"(eq ${1:expr1} ${2:expr2})"
],
"description":"确定两个表达式是否具有相同的约束条件"
},
"equal": {
"prefix" : "equal",
"body": [
"(equal ${1:expr1} ${2:expr2} ${3:[fuzz]})"
],
"description":"确定两个表达式的值是否相等"
},
"error*": {
"prefix" : "error*",
"body": [
"(*error* ${1:string})"
],
"description":"可由用户定义的错误处理函数"
},
"eval": {
"prefix" : "eval",
"body": [
"(eval ${1:expr})"
],
"description":"返回 AutoLISP 表达式的求值结果"
},
"exit": {
"prefix" : "exit",
"body": [
"(exit)"
],
"description":"强行使当前应用程序退出"
},
"exp": {
"prefix" : "exp",
"body": [
"(exp ${1:num})"
],
"description":"返回常数 e (2.718282...) 的指定次幂（自然反对数）"
},
"expand": {
"prefix" : "expand",
"body": [
"(expand ${1:n-expand})"
],
"description":"为 AutoLISP 分配附加空间"
},
"expt": {
"prefix" : "expt",
"body": [
"(expt ${1:number} ${2:power})"
],
"description":"返回以某指定数为底数的若干次幂的值.\n 平方: (expt number 2)\n 立方: (expt number 3)"
},
"fill_image": {
"prefix" : "fill_image",
"body": [
"(fill_image ${1:x1} ${2:y1} ${3:width} ${4:height} ${5:color})"
],
"description":"在当前激活的对话框图像控件中画一个填充矩形"
},
"findfile": {
"prefix" : "findfile",
"body": [
"(findfile ${1:filename})"
],
"description":"在 AutoCAD 库路径中搜索指定文件或目录"
},
"fix": {
"prefix" : "fix",
"body": [
"(fix ${1:number})"
],
"description":"截去实数的小数部分，将它转换成整数后返回该整数"
},
"float": {
"prefix" : "float",
"body": [
"(float ${1:number})"
],
"description":"将一个数转换为实数后返回"
},
"foreach": {
"prefix" : "foreach",
"body": [
"(foreach ${1:name} ${2:list} ${3:[expr} ${4:&rest]})"
],
"description":"将表中的所有成员以指定变量的身份带入表达式求值"
},
"gc": {
"prefix" : "gc",
"body": [
"(gc)"
],
"description":"强制收集无用数据，释放不再使用的节点"
},
"gcd": {
"prefix" : "gcd",
"body": [
"(gcd ${1:int1} ${2:int2})"
],
"description":"返回两个整数的最大公约数"
},
"getangle": {
"prefix" : "getangle",
"body": [
"(getangle ${1:[pt]} ${2:[msg]})"
],
"description":"暂停以等待用户输入角度，然后以弧度形式返回该角度"
},
"get_attr": {
"prefix" : "get_attr",
"body": [
"(get_attr ${1:key} ${2:attribute})"
],
"description":"获取对话框指定控件的某个属性值"
},
"getcfg": {
"prefix" : "getcfg",
"body": [
"(getcfg ${1:cfgname})"
],
"description":"从 acad.cfg 文件的 AppData 段中检索应用数据"
},
"getcname": {
"prefix" : "getcname",
"body": [
"(getcname ${1:cname})"
],
"description":"获取 AutoCAD 命令的本地化名或英文名"
},
"getcorner": {
"prefix" : "getcorner",
"body": [
"(getcorner ${1:pt} ${2:[msg]})"
],
"description":"暂停等待用户输入矩形第二个角点的坐标"
},
"getdist": {
"prefix" : "getdist",
"body": [
"(getdist ${1:[pt]} ${2:[msg]})"
],
"description":"暂停以等待用户输入距离"
},
"getenv": {
"prefix" : "getenv",
"body": [
"(getenv ${1:variable-name})"
],
"description":"以字符串方式返回指定的环境变量的值"
},
"getfiled": {
"prefix" : "getfiled",
"body": [
"(getfiled ${1:title} ${2:default} ${3:ext} ${4:flags})"
],
"description":"用标准的 AutoCAD 文件对话框提示用户输入一个文件名，并返回该文件名。\n default: 默认路径\n ext:扩展表。不含 .\n flags:\n 控制对话框行为的整数值（位编码字段）。要一次设置多个条件，请将这些值相加，以创建一个介于0和15之间的标志值。getfield可以识别以下标志参数：\n 1（位0）--提示输入要创建的新文件的名称。当提示打开现有文件的名称时，不要设置此位。在后一种情况下，如果用户输入不存在的文件名，对话框将在底部显示错误消息。如果设置了此位，并且用户选择了一个已经存在的文件，AutoCAD将显示一个警告框，并提供继续或取消操作的选择。\n 4（位2）--让用户输入任意文件扩展名，或者根本不输入扩展名。\n 如果未设置此位，getfield只接受ext参数中指定的扩展名，如果用户未在file文本框中输入扩展名，则将此扩展名附加到文件名。\n 8（位3）——如果设置了该位，而未设置位0，getfield将对输入的文件名执行库搜索。如果它在库搜索路径中找到文件及其目录，则会删除路径并仅返回文件名。（如果发现同名文件位于不同的目录中，则不会删除路径名。）\n 如果未设置该位，getfield将返回整个文件名，包括路径名。\n 如果使用对话框打开要在图形（或其他数据库）中保存其名称的现有文件，请设置此位。\n 16（位4）--如果设置了此位，或者默认参数以路径分隔符结尾，则该参数仅被解释为路径名。getfield函数假定没有默认文件名。它在“查找范围：”行中显示路径，并将“文件名”框留空。\n 32（位5）--如果设置了此位，并且设置了位0（表示正在指定一个新文件），则用户将不会收到覆盖现有文件的警告。不会显示警告用户已存在同名文件的警告框；旧文件将被替换。\n 64（位6）--如果用户指定了URL，则不要传输远程文件。\n 128（位7）--根本不允许URL。\n (getfield \"指定图片文件\" \"D:\\\" \"png\" 8)"
},
"getint": {
"prefix" : "getint",
"body": [
"(getint ${1:[msg]})"
],
"description":"暂停以等待用户输入一个整数并返回该整数"
},
"getkword": {
"prefix" : "getkword",
"body": [
"(getkword ${1:[msg]})"
],
"description":"暂停以等待用户输入一个关键字并返回该关键字"
},
"getorient": {
"prefix" : "getorient",
"body": [
"(getorient ${1:[pt]} ${2:[msg]})"
],
"description":"暂停以等待用户输入角度，并返回该角度"
},
"getpoint": {
"prefix" : "getpoint",
"body": [
"(getpoint ${1:[pt]} ${2:[msg]})"
],
"description":"暂停以等待用户输入点，并返回该点"
},
"getreal": {
"prefix" : "getreal",
"body": [
"(getreal ${1:[msg]})"
],
"description":"暂停以让用户输入一个实数并返回该实数"
},
"getstring": {
"prefix" : "getstring",
"body": [
"(getstring ${1:[cr]} ${2:[msg]})"
],
"description":"暂停以等待用户输入字符串，并返回该字符串"
},
"get_tile": {
"prefix" : "get_tile",
"body": [
"(get_tile ${1:key})"
],
"description":"获取对话框指定控件的当前运行时的值"
},
"getvar": {
"prefix" : "getvar",
"body": [
"(getvar ${1:varname})"
],
"description":"获取一个 AutoCAD 系统变量的值"
},
"函数graphscr": {
"prefix" : "函数graphscr",
"body": [
"(graphscr)"
],
"description":"显示 AutoCAD 图形屏幕"
},
"grclear": {
"prefix" : "grclear",
"body": [
"(grclear)"
],
"description":"清除当前视口（已废弃）"
},
"grdraw": {
"prefix" : "grdraw",
"body": [
"(grdraw ${1:from} ${2:to} ${3:color} ${4:[highlight]})"
],
"description":"在当前视口中的两个点之间显示一条矢量线"
},
"grread": {
"prefix" : "grread",
"body": [
"(grread ${1:[track]} ${2:[allkeys} ${3:[curtype]]})"
],
"description":"从 AutoCAD 的任何一种输入设备中读取数值"
},
"grtext": {
"prefix" : "grtext",
"body": [
"(grtext ${1:[box} ${2:text} ${3:[highlight]]})"
],
"description":"将文本写到状态行或屏幕菜单区"
},
"grvecs": {
"prefix" : "grvecs",
"body": [
"(grvecs ${1:vlist} ${2:[trans]})"
],
"description":"在图形屏幕上绘制多个矢量"
},
"handent": {
"prefix" : "handent",
"body": [
"(handent ${1:handle})"
],
"description":"根据对象（图元）的句柄返回它的对象（图元）名"
},
"if": {
"prefix" : "if",
"body": [
"(if ${1:testexpr} ${2:thenexpr} ${3:[elseexpr]})"
],
"description":"根据对条件的判断结果，对两个表达式求值\n 详见：\n https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org"
},
"initget": {
"prefix" : "initget",
"body": [
"(initget ${1:[bits]} ${2:[string]})"
],
"description":"为随后的用户输入函数调用创建关键字"
},
"inters": {
"prefix" : "inters",
"body": [
"(inters ${1:pt1} ${2:pt2} ${3:pt3} ${4:pt4} ${5:[onseg]})"
],
"description":"求两条直线的交点"
},
"itoa": {
"prefix" : "itoa",
"body": [
"(itoa ${1:int})"
],
"description":"将整数转换成字符串，并返回转换结果"
},
"lambda": {
"prefix" : "lambda",
"body": [
"(lambda ${1:arguments} ${2:expr} ${3:&rest})"
],
"description":"定义无名函数\n 详见： https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E8%BF%9B%E9%98%B6/lisp.org"
},
"last": {
"prefix" : "last",
"body": [
"(last ${1:lst})"
],
"description":"返回表的最后一个元素"
},
"length": {
"prefix" : "length",
"body": [
"(length ${1:lst})"
],
"description":"以整数形式返回表中元素的数目"
},
"函数list": {
"prefix" : "函数list",
"body": [
"(list ${1:[expr} ${2:&rest]})"
],
"description":"将任意数目的表达式组合成一个表\n 详见：\n https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org"
},
"listp": {
"prefix" : "listp",
"body": [
"(listp ${1:item})"
],
"description":"检查某个项是否是表"
},
"load": {
"prefix" : "load",
"body": [
"(load ${1:filename} ${2:[onfailure]})"
],
"description":"此函数将装入一个包含AutoLISP表达式的文件, 同时判别这些表达式。filename是一个代表文件名称的字符串, 而且不须加上扩展名(因为扩展名.lsp是自动设定)。"
},
"load_dialog": {
"prefix" : "load_dialog",
"body": [
"(load_dialog ${1:dclfile})"
],
"description":"加载 DCL 文件"
},
"log": {
"prefix" : "log",
"body": [
"(log ${1:num})"
],
"description":"返回一个实数的自然对数"
},
"logand": {
"prefix" : "logand",
"body": [
"(logand ${1:[int} ${2:int} ${3:&rest]})"
],
"description":"返回一个整数表中的各数按位逻辑与 (AND) 的结果"
},
"logior": {
"prefix" : "logior",
"body": [
"(logior ${1:[intint} ${2:&rest]})"
],
"description":"返回一个整数表中的各数按位逻辑或 (OR) 的结果"
},
"lsh": {
"prefix" : "lsh",
"body": [
"(lsh ${1:int} ${2:numbits})"
],
"description":"返回某整数作指定次逻辑移位后的结果"
},
"mapcar": {
"prefix" : "mapcar",
"body": [
"(mapcar ${1:(quote function)} ${2:list1} ${3:&rest} ${4:listn})"
],
"description":"循环取list1至listn相同位置的元素同时作为function的参数进行求值，并将求值结果构成的表返回\n 详见： https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E8%BF%9B%E9%98%B6/lisp.org"
},
"max": {
"prefix" : "max",
"body": [
"(max ${1:[number} ${2:number} ${3:&rest]})"
],
"description":"返回给定各数中的最大者"
},
"mem": {
"prefix" : "mem",
"body": [
"(mem)"
],
"description":"显示 AutoLISP 内存的当前状态"
},
"member": {
"prefix" : "member",
"body": [
"(member ${1:expr} ${2:lst})"
],
"description":"搜索表中是否包含某表达式，并从该表达式的第一次出现处返回表的其余部分\n 详见：\n https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org"
},
"menucmd": {
"prefix" : "menucmd",
"body": [
"(menucmd ${1:string})"
],
"description":"发出菜单命令，或设置并检索菜单项状态"
},
"menugroup": {
"prefix" : "menugroup",
"body": [
"(menugroup ${1:groupname})"
],
"description":"检查是否加载了指定的菜单组"
},
"min": {
"prefix" : "min",
"body": [
"(min ${1:[number} ${2:number} ${3:&rest]})"
],
"description":"返回给定各数中的最小者"
},
"minusp": {
"prefix" : "minusp",
"body": [
"(minusp ${1:num})"
],
"description":"检查某个数是否是负数"
},
"mode_tile": {
"prefix" : "mode_tile",
"body": [
"(mode_tile ${1:key} ${2:mode})"
],
"description":"设置对话框控件的状态"
},
"namedobjdict": {
"prefix" : "namedobjdict",
"body": [
"(namedobjdict)"
],
"description":"返回当前图形的命名对象词典的图元名，它是所有非图形对象的根"
},
"nentsel": {
"prefix" : "nentsel",
"body": [
"(nentsel ${1:[msg]})"
],
"description":"提示用户指定点来选择对象（图元），得到这个对象所指片段的对象名"
},
"nentselp": {
"prefix" : "nentselp",
"body": [
"(nentselp ${1:[msg]} ${2:[pt]})"
],
"description":"在没有用户输入的情况下，本函数的功能与 nentsel 函数类似"
},
"new_dialog": {
"prefix" : "new_dialog",
"body": [
"(new_dialog ${1:dlgname} ${2:dcl_id} ${3:[action} ${4:[screen-pt]]})"
],
"description":"开始一个新的对话框并显示该对话框，而且能指定一个缺省操作"
},
"not": {
"prefix" : "not",
"body": [
"(not ${1:item})"
],
"description":"检查一个项的求值结果是否为 nil"
},
"nth": {
"prefix" : "nth",
"body": [
"(nth ${1:n} ${2:lst})"
],
"description":"返回表中的第 n 个元素"
},
"null": {
"prefix" : "null",
"body": [
"(null ${1:item})"
],
"description":"检查某项的值是否设置为 nil"
},
"numberp": {
"prefix" : "numberp",
"body": [
"(numberp ${1:item})"
],
"description":"检查某个项是否是实数或整数"
},
"函数open": {
"prefix" : "函数open",
"body": [
"(open ${1:filename} ${2:mode})"
],
"description":"打开一个文件，供其他 AutoLISP I/O 函数访问\n mode: \"r\" 读取 \"w\" 写 \"a\" 追加\n (setq fp (open (findfile \"acad.pgp\") \"r\"))\n (read-line fp)\n (close fp)"
},
"or": {
"prefix" : "or",
"body": [
"(or ${1:[expr} ${2:&rest]})"
],
"description":"返回对表达式进行逻辑或 (OR) 运算的结果"
},
"函数osnap": {
"prefix" : "函数osnap",
"body": [
"(osnap ${1:pt} ${2:mode})"
],
"description":"将某种对象捕捉模式作用于指定点而获得一个点，并返回该点"
},
"polar": {
"prefix" : "polar",
"body": [
"(polar ${1:pt} ${2:ang} ${3:dist})"
],
"description":"在 UCS 坐标系下，求某点的指定角度和指定距离处的点，并返回该点"
},
"prin1": {
"prefix" : "prin1",
"body": [
"(print ${1:[expr} ${2:[file-desc]]})"
],
"description":"在命令行打印表达式，或将表达式写入已打开的文件中，其结果可用 read 读入。"
},
"princ": {
"prefix" : "princ",
"body": [
"(princ ${1:[expr} ${2:[file-desc]]})"
],
"description":"在命令行打印表达式，或将表达式写入已打开的文件中"
},
"print": {
"prefix" : "print",
"body": [
"(print ${1:[expr} ${2:[file-desc]]})"
],
"description":"在命令行打印表达式，或将表达式写入已打开的文件中"
},
"progn": {
"prefix" : "progn",
"body": [
"(progn ${1:[expr]} ${2:&rest})"
],
"description":"顺序地对每一个表达式进行求值，并返回最后那个表达式的值\n 详见： https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E8%BF%9B%E9%98%B6/lisp.org"
},
"prompt": {
"prefix" : "prompt",
"body": [
"(prompt ${1:msg})"
],
"description":"在屏幕提示区显示一个字符串"
},
"函数quit": {
"prefix" : "函数quit",
"body": [
"(quit)"
],
"description":"强制退出当前应用程序"
},
"quote": {
"prefix" : "quote",
"body": [
"(quote ${1:expr})"
],
"description":"返回表达式而不对其求值\n 详见：\n https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org"
},
"read": {
"prefix" : "read",
"body": [
"(read ${1:[string]})"
],
"description":"返回字符串中的第一个表或第一个原子"
},
"read-line": {
"prefix" : "read-line",
"body": [
"(read-line ${1:[file-desc]})"
],
"description":"从键盘或已打开文件中读取行结束符前的字符串"
},
"函数redraw": {
"prefix" : "函数redraw",
"body": [
"(redraw ${1:[ename} ${2:[mode]]})"
],
"description":"重画当前视口或当前视口中的一个指定对象（图元）"
},
"regapp": {
"prefix" : "regapp",
"body": [
"(regapp ${1:application})"
],
"description":"为当前 AutoCAD 图形注册一个应用名，为使用扩展对象数据作准备"
},
"rem": {
"prefix" : "rem",
"body": [
"(rem ${1:[number} ${2:number} ${3:&rest]})"
],
"description":"将第一个数除以第二个数，并返回余数"
},
"repeat": {
"prefix" : "repeat",
"body": [
"(repeat ${1:int} ${2:[expr} ${3:&rest]})"
],
"description":"对循环体中的每一个表达式进行指定次数的求值计算，并返回最后一个表达式的值"
},
"函数reverse": {
"prefix" : "函数reverse",
"body": [
"(reverse ${1:lst})"
],
"description":"将表的元素顺序倒置后返回"
},
"rtos": {
"prefix" : "rtos",
"body": [
"(rtos ${1:number} ${2:[mode} ${3:[precision]]})"
],
"description":"将数字转换成字符串"
},
"set": {
"prefix" : "set",
"body": [
"(set ${1:sym} ${2:expr})"
],
"description":"将引号中的符号名的值设置成一个表达式的值"
},
"setcfg": {
"prefix" : "setcfg",
"body": [
"(setcfg ${1:cfgname} ${2:cfgval})"
],
"description":"将应用数据写到 acad.cfg 文件的 AppData 段中"
},
"setfunhelp": {
"prefix" : "setfunhelp",
"body": [
"(setfunhelp ${1:c:fname} ${2:[helpfile} ${3:[topic} ${4:[command]]]})"
],
"description":"给帮助工具注册一个用户定义函数，这样，用户在请求该命令的帮助时，就会调用正确的帮助文件和主题"
},
"setq": {
"prefix" : "setq",
"body": [
"(setq ${1:sym} ${2:expr} ${3:[sym} ${4:expr]} ${5:&rest})"
],
"description":"将一个或多个符号的值设置为相应表达式的值"
},
"set_tile": {
"prefix" : "set_tile",
"body": [
"(set_tile ${1:key} ${2:value})"
],
"description":"设置对话框控件的值"
},
"函数setvar": {
"prefix" : "函数setvar",
"body": [
"(setvar ${1:varname} ${2:value})"
],
"description":"设置 AutoCAD 系统变量为指定值"
},
"setview": {
"prefix" : "setview",
"body": [
"(setview ${1:view_descriptor} ${2:[vport_id]})"
],
"description":"为指定视口建立一个视图"
},
"sin": {
"prefix" : "sin",
"body": [
"(sin ${1:ang})"
],
"description":"以实数形式返回角度的正弦值（以弧度为单位）"
},
"slide_image": {
"prefix" : "slide_image",
"body": [
"(slide_image ${1:x1} ${2:y1} ${3:width} ${4:height} ${5:sldname})"
],
"description":"在当前激活的对话框图像控件中显示 AutoCAD 幻灯片"
},
"snvalid": {
"prefix" : "snvalid",
"body": [
"(snvalid ${1:sym_name} ${2:[flag]})"
],
"description":"检查组成符号表名的各字符的有效性"
},
"sqrt": {
"prefix" : "sqrt",
"body": [
"(sqrt ${1:num})"
],
"description":"以实数形式返回一个数的平方根"
},
"ssadd": {
"prefix" : "ssadd",
"body": [
"(ssadd ${1:[ename} ${2:[ss]]})"
],
"description":"将对象（图元）加入到选择集中，或创建新的选择集"
},
"ssdel": {
"prefix" : "ssdel",
"body": [
"(ssdel ${1:ename} ${2:ss})"
],
"description":"从选择集中撤消对象（图元）"
},
"ssget": {
"prefix" : "ssget",
"body": [
"(ssget ${1:[sel-method]} ${2:[pt1} ${3:[pt2]]} ${4:[pt-list]} ${5:[filter-list]})"
],
"description":"根据选定对象创建选择集\n *** 两点参数:c 反选 w 正选\n (ssget \"c\" pt1 pt2 [filter-list])\n *** 点列表参数:多边形cp wp，f栏选\n (ssget \"cp\" pt-list [filter-list])\n *** 无点参数的选择模式\n (ssget \"p\" [filter-list]) ;; 上一个选择集\n l 最后创建的 (entlast)\n i 隐含选择，先选择后执行\n x 整个文件\n :E 用鼠标拾取框选择对象\n :S 点选一次\n :S:E \n :D 可重复\n :L 不选择锁定图层对象\n 详：https://gitee.com/atlisp/atlisp-docs/blob/main/AutoLisp/ssget.org"
},
"ssgetfirst": {
"prefix" : "ssgetfirst",
"body": [
"(ssgetfirst)"
],
"description":"判断哪些对象是被选取的和被夹取的"
},
"sslength": {
"prefix" : "sslength",
"body": [
"(sslength ${1:ss})"
],
"description":"求出一个选择集中的对象（图元）数目，并将其作为一个整数返回"
},
"ssmemb": {
"prefix" : "ssmemb",
"body": [
"(ssmemb ${1:ename} ${2:ss})"
],
"description":"测试某对象（图元）是否是选择集的成员"
},
"ssname": {
"prefix" : "ssname",
"body": [
"(ssname ${1:ss} ${2:index})"
],
"description":"返回选择集中由序号指定的那个对象（图元）的图元名"
},
"ssnamex": {
"prefix" : "ssnamex",
"body": [
"(ssnamex ${1:ss} ${2:[index]})"
],
"description":"获取关于选择集创建方式的信息"
},
"sssetfirst": {
"prefix" : "sssetfirst",
"body": [
"(sssetfirst ${1:gripset} ${2:[pickset]})"
],
"description":"设置哪些对象既是被选取的又是被夹取的。\n gripset: 一般为 nil."
},
"startapp": {
"prefix" : "startapp",
"body": [
"(startapp ${1:appcmd} ${2:[file]})"
],
"description":"启动 Windows 应用程序"
},
"start_dialog": {
"prefix" : "start_dialog",
"body": [
"(start_dialog)"
],
"description":"显示对话框并将控制交给对话框"
},
"start_image": {
"prefix" : "start_image",
"body": [
"(start_image ${1:key})"
],
"description":"开始对对话框控件中的一个图像控件进行操作"
},
"start_list": {
"prefix" : "start_list",
"body": [
"(start_list ${1:key} ${2:[operation} ${3:[index]]})"
],
"description":"开始处理对话框中的列表框或弹出式列表框中的列表"
},
"strcase": {
"prefix" : "strcase",
"body": [
"(strcase ${1:string} ${2:[lcase]})"
],
"description":"返回所有字母大写的字符串(如果 lcase 不为 nil 则小写)"
},
"strcat": {
"prefix" : "strcat",
"body": [
"(strcat ${1:[string} ${2:[string]} ${3:&rest]})"
],
"description":"返回从左到右拼接后的字符串"
},
"strlen": {
"prefix" : "strlen",
"body": [
"(strlen ${1:[string]} ${2:&rest})"
],
"description":"以整数形式返回一个字符串中字符的个数(不一定是字节长度)\n unicode版本每个字的长度为 1. "
},
"subst": {
"prefix" : "subst",
"body": [
"(subst ${1:newitem} ${2:olditem} ${3:lst})"
],
"description":"在表中搜索某旧项，并将表中出现的每一个旧项用新项代替，然后返回修改后所得的表\n 详见：\n https://gitee.com/atlisp/atlisp-docs/blob/main/Lisp%E5%85%A5%E9%97%A8/1-lisp.org"
},
"substr": {
"prefix" : "substr",
"body": [
"(substr ${1:string} ${2:start} ${3:[length]})"
],
"description":"返回字符串中的一个子字符串,字符串中的第一个字符的位置为 1"
},
"函数tablet": {
"prefix" : "函数tablet",
"body": [
"(tablet ${1:code} ${2:[row1} ${3:row2} ${4:row3} ${5:direction]})"
],
"description":"获取和设置数字化仪校准"
},
"tblnext": {
"prefix" : "tblnext",
"body": [
"(tblnext ${1:table-name} ${2:[rewind]})"
],
"description":"在符号表中查找下一项"
},
"tblobjname": {
"prefix" : "tblobjname",
"body": [
"(tblobjname ${1:table-name} ${2:symbol})"
],
"description":"返回指定符号表条目的图元名"
},
"tblsearch": {
"prefix" : "tblsearch",
"body": [
"(tblsearch ${1:table-name} ${2:symbol} ${3:[setnext]})"
],
"description":"在指定的符号表中搜索符号名"
},
"term_dialog": {
"prefix" : "term_dialog",
"body": [
"(term_dialog)"
],
"description":"终止当前所有的对话框，就象用户取消了它们一样"
},
"terpri": {
"prefix" : "terpri",
"body": [
"(terpri)"
],
"description":"在命令行上输出一个换行符"
},
"textbox": {
"prefix" : "textbox",
"body": [
"(textbox ${1:elist})"
],
"description":"测量一个指定文本对象的尺寸，并返回围住该文本的一个矩形框的对角坐标"
},
"textpage": {
"prefix" : "textpage",
"body": [
"(textpage)"
],
"description":"从图形屏幕切换至文本屏幕"
},
"函数textscr": {
"prefix" : "函数textscr",
"body": [
"(textscr)"
],
"description":"切换至文本屏幕（相当于 AutoCAD Flip Screen 功能键）"
},
"trace": {
"prefix" : "trace",
"body": [
"(trace ${1:[function} ${2:&rest]})"
],
"description":"调试 AutoLISP 程序时的辅助函数"
},
"trans": {
"prefix" : "trans",
"body": [
"(trans ${1:pt} ${2:from} ${3:to} ${4:[disp]})"
],
"description":"将 pt 坐标(3维点)从坐标系换算到坐标系disp:\n 非 nil 则以3维位移量的转换模式来换算 pt\n from to: \n   0 表示 WCS\n   1 表示当前 UCS\n   2 搭配码 0 1 时，表示当前视口的显示坐标系 DCS\n     搭配码 3 时，表示当前模型空间视口的 DCS\n   3 图纸空间 DCS，仅搭配码 2 "
},
"函数type": {
"prefix" : "函数type",
"body": [
"(type ${1:item})"
],
"description":"返回指定项的数据类型"
},
"unload_dialog": {
"prefix" : "unload_dialog",
"body": [
"(unload_dialog ${1:dcl_id})"
],
"description":"卸载 DCL 文件"
},
"untrace": {
"prefix" : "untrace",
"body": [
"(untrace ${1:[function} ${2:&rest]})"
],
"description":"清除指定函数的跟踪标志"
},
"vector_image": {
"prefix" : "vector_image",
"body": [
"(vector_image ${1:x1} ${2:y1} ${3:x2} ${4:y2} ${5:color})"
],
"description":"在当前激活的对话框图像控件上显示一个矢量线"
},
"函数ver": {
"prefix" : "函数ver",
"body": [
"(ver)"
],
"description":"返回当前 AutoLISP 版本号的字符串"
},
"函数vports": {
"prefix" : "函数vports",
"body": [
"(vports)"
],
"description":"返回表示当前视口配置的视口描述符表"
},
"wcmatch": {
"prefix" : "wcmatch",
"body": [
"(wcmatch ${1:string} ${2:pattern})"
],
"description":"将模式字符串与某指定的字符串进行匹配比较\n #（pound） 匹配任何单个数字。\n @（at）    匹配任何单个字母字符。\n .（period）匹配任何单个非字母数字字符。\n *（星号）  匹配任何字符序列，包括空字符序列，它可以在搜索模式中的任何位置使用：在开头、中间或结尾。\n ? (问号) 匹配任何单个字符。\n ~（波浪号）如果它是模式中的第一个字符，那么它将匹配除模式之外的任何字符。\n [...]      匹配包含的任何一个字符。\n [~...]     匹配任何未括起来的单个字符。\n -（连字符）在括号内用于指定单个字符的范围。\n ，（逗号） 分隔两个匹配模式。\n `（反引号）转义特殊字符（逐字读取下一个字符）。"
},
"while": {
"prefix" : "while",
"body": [
"(while ${1:testexpr} ${2:[expr} ${3:&rest]})"
],
"description":"对测试表达式进行求值，如果它不是 nil，则执行循环体中的表达式，重复这个过程，直到测试表达式的求值结果为 nil"
},
"write-char": {
"prefix" : "write-char",
"body": [
"(write-char ${1:num} ${2:[file-desc]})"
],
"description":"将一个字符写到屏幕上或一个已打开的文件中"
},
"write-line": {
"prefix" : "write-line",
"body": [
"(write-line ${1:string} ${2:[file-desc]})"
],
"description":"将字符串写到屏幕上或一个已打开的文件中"
},
"xdroom": {
"prefix" : "xdroom",
"body": [
"(xdroom ${1:ename})"
],
"description":"返回对象可供使用的扩展数据 (Xdata) 空间的大小"
},
"xdsize": {
"prefix" : "xdsize",
"body": [
"(xdsize ${1:lst})"
],
"description":"返回一个表作为扩展数据连接到对象（图元）上时所占用的空间大小（以字节表示）"
},
"xload": {
"prefix" : "xload",
"body": [
"(xload ${1:application} ${2:[onfailure]})"
],
"description":"这个函数将装入一个AutoCAD高级开发系统(ADS)的应用程序。"
},
"xunload": {
"prefix" : "xunload",
"body": [
"(xunload ${1:application} ${2:[onfailure]})"
],
"description":"此函数将卸载一个ADS应用程序。如果应用程序被成功地卸下。那么, 应用程序的名称将被返回。否则, 一个错误信息将被发出。"
},
"zerop": {
"prefix" : "zerop",
"body": [
"(zerop ${1:number})"
],
"description":"检查一个数的值是否为 0"
},
"bpoly": {
"prefix" : "bpoly",
"body": [
"(bpoly ${1:pt} ${2:[ss} ${3:vector]})"
],
"description":"3.14159,圆周率\n 搜索点附近曲线,生成最小边界"
},
"cddr": {
"prefix" : "cddr",
"body": [
"(cddr ${1:lst})"
],
"description":"返回去掉了前两个元素的表"
},
"cdddr": {
"prefix" : "cdddr",
"body": [
"(cdddr ${1:lst})"
],
"description":"返回去掉了前三个元素的表"
},
"cddddr": {
"prefix" : "cddddr",
"body": [
"(cddddr ${1:lst})"
],
"description":"返回去掉了前四个元素的表"
},
"cdddar": {
"prefix" : "cdddar",
"body": [
"(cdddar ${1:lst})"
],
"description":"返回表内第一个表，并去掉前三个元素。"
},
"cddar": {
"prefix" : "cddar",
"body": [
"(cddar ${1:lst})"
],
"description":"返回表内第一个表，并去掉前两个元素"
},
"cddadr": {
"prefix" : "cddadr",
"body": [
"(cddadr ${1:lst})"
],
"description":"数据库中没有收录这个函数!请帮助录入,谢谢"
},
"cddaar": {
"prefix" : "cddaar",
"body": [
"(cddaar ${1:lst})"
],
"description":"数据库中没有收录这个函数!请帮助录入,谢谢"
},
"cdar": {
"prefix" : "cdar",
"body": [
"(cdar ${1:list})"
],
"description":"返回表内第一个表中去掉了第一个元素的表"
},
"cdadr": {
"prefix" : "cdadr",
"body": [
"(cdadr ${1:lst})"
],
"description":"获取表第二个元素,然后再去除第一个元素"
},
"cdaddr": {
"prefix" : "cdaddr",
"body": [
"(cdaddr ${1:lst})"
],
"description":"数据库中没有收录这个函数!请帮助录入,谢谢"
},
"cdadar": {
"prefix" : "cdadar",
"body": [
"(cdadar ${1:lst})"
],
"description":"返回表内第一个子表的第二个子表，且去掉第一个元素！"
},
"cdaar": {
"prefix" : "cdaar",
"body": [
"(cdaar ${1:lst})"
],
"description":"返回三层表以上，一层第1项，二层第1项，三层除掉第1项数据"
},
"cdaadr": {
"prefix" : "cdaadr",
"body": [
"(cdaadr ${1:lst})"
],
"description":"数据库中没有收录这个函数!"
},
"cdaaar": {
"prefix" : "cdaaar",
"body": [
"(cdaaar ${1:lst})"
],
"description":"返回4层表，一层第1项，二层第1项，三层第1项，四层去掉第一项数据"
},
"cadddr": {
"prefix" : "cadddr",
"body": [
"(cadddr ${1:lst})"
],
"description":"返回表的第四个元素（易云网络）"
},
"caddar": {
"prefix" : "caddar",
"body": [
"(caddar ${1:lst})"
],
"description":"返回表内第一个表的第三个元素。"
},
"cadar": {
"prefix" : "cadar",
"body": [
"(cadar ${1:lst})"
],
"description":"返回表内第一个表的第二个值"
},
"cadadr": {
"prefix" : "cadadr",
"body": [
"(cadadr ${1:lst})"
],
"description":"返回表内第二个表的第二个值"
},
"cadaar": {
"prefix" : "cadaar",
"body": [
"(cadaar ${1:lst})"
],
"description":"返回第三个内表里面的第一个值"
},
"caar": {
"prefix" : "caar",
"body": [
"(caar ${1:lst})"
],
"description":"返回表内的第一个子表的第一个值"
},
"caadr": {
"prefix" : "caadr",
"body": [
"(caadr ${1:lst})"
],
"description":"反回表内第二个表的第一个值"
},
"caaddr": {
"prefix" : "caaddr",
"body": [
"(caaddr ${1:lst})"
],
"description":"反回表内第三个表的第一个值"
},
"caadar": {
"prefix" : "caadar",
"body": [
"(caadar ${1:lst})"
],
"description":"相当于(car(car(cdr(car lst))))"
},
"caaar": {
"prefix" : "caaar",
"body": [
"(caaar ${1:lst})"
],
"description":"第3级子表的第一个元素\n 相当于(car(car(car lst)))"
},
"caaadr": {
"prefix" : "caaadr",
"body": [
"(caaadr ${1:lst})"
],
"description":"相当于(car(car(car(cdr lst))))的简写"
},
"caaaar": {
"prefix" : "caaaar",
"body": [
"(caaaar ${1:lst})"
],
"description":"第4级子表的第一个元素"
},
"vl-string->list": {
"prefix" : "vl-string->list",
"body": [
"(vl-string->list ${1:string})"
],
"description":"将字符串转换为字符代码表"
},
"vl-princ-to-string": {
"prefix" : "vl-princ-to-string",
"body": [
"(vl-princ-to-string ${1:data})"
],
"description":"返回 LISP 数据的字符串表示，就象它是由 princ 函数输出的一样"
},
"vl-mkdir": {
"prefix" : "vl-mkdir",
"body": [
"(vl-mkdir ${1:directoryname})"
],
"description":"创建目录"
},
"vl-list-loaded-vlx": {
"prefix" : "vl-list-loaded-vlx",
"body": [
"(vl-list-loaded-vlx)"
],
"description":"返回与当前文档相关联的所有独立名称空间 VLX 文件"
},
"vl-filename-directory": {
"prefix" : "vl-filename-directory",
"body": [
"(vl-filename-directory ${1:filename})"
],
"description":"去掉文件的名称和扩展名，返回文件的路径。"
},
"vl-list*": {
"prefix" : "vl-list*",
"body": [
"(vl-list* ${1:object[object]} ${2:&rest})"
],
"description":"构造并返回表"
},
"_vl-times": {
"prefix" : "_vl-times",
"body": [
"(_vl-times)"
],
"description":"下面是用法\n (setq start (car (_vl-times)))\n ;测试代码\n (/(-(car (_vl-times))start)1000.)\n 计时器函数，可用于计算程序运行效率"
},
"vl-infp": {
"prefix" : "vl-infp",
"body": [
"(vl-infp ${1:num})"
],
"description":"(vl-infp 333)  返回nil\n (vl-infp 1e2222) 返回T,判断一个数是否无穷大"
},
"vl-bt": {
"prefix" : "vl-bt",
"body": [
"(vl-bt)"
],
"description":"错误跟踪"
},
"vl-acad-defun": {
"prefix" : "vl-acad-defun",
"body": [
"(vl-acad-defun ${1:(quote symbol)})"
],
"description":"将 Visual LISP 函数符号定义为外部子例程"
},
"vl-acad-undefun": {
"prefix" : "vl-acad-undefun",
"body": [
"(vl-acad-undefun ${1:(quote symbol)})"
],
"description":"取消对 Visual LISP 函数符号的定义，使 ObjectARX 应用程序不能再使用它。"
},
"vl-arx-import": {
"prefix" : "vl-arx-import",
"body": [
"(vl-arx-import ${1:[function-or-application]})"
],
"description":"将 ObjectARX/ADSRX 函数输入到独立名称空间 VLX"
},
"vl-bb-ref": {
"prefix" : "vl-bb-ref",
"body": [
"(vl-bb-ref ${1:(quote variable)})"
],
"description":"返回黑板名称空间中变量的值"
},
"vl-bb-set": {
"prefix" : "vl-bb-set",
"body": [
"(vl-bb-set ${1:(quote symbol)} ${2:value})"
],
"description":"设置黑板名称空间中的变量"
},
"vl-catch-all-apply": {
"prefix" : "vl-catch-all-apply",
"body": [
"(vl-catch-all-apply ${1:(quote function)} ${2:list})"
],
"description":"将参数表传递给指定函数并截取错误"
},
"vl-catch-all-error-message": {
"prefix" : "vl-catch-all-error-message",
"body": [
"(vl-catch-all-error-message ${1:error-obj})"
],
"description":"从错误对象返回字符串"
},
"vl-catch-all-error-p": {
"prefix" : "vl-catch-all-error-p",
"body": [
"(vl-catch-all-error-p ${1:arg})"
],
"description":"确定参数是否是 vl-catch-all-apply 返回的错误对象"
},
"vl-cmdf": {
"prefix" : "vl-cmdf",
"body": [
"(vl-cmdf ${1:[arguments]} ${2:&rest})"
],
"description":"执行 AutoCAD 命令"
},
"vl-consp": {
"prefix" : "vl-consp",
"body": [
"(vl-consp ${1:list-variable})"
],
"description":"确定表是否不为 nil"
},
"vl-directory-files": {
"prefix" : "vl-directory-files",
"body": [
"(vl-directory-files ${1:[directory} ${2:pattern} ${3:directories]})"
],
"description":"获取指定目录中的所有文件夹列表"
},
"vl-doc-export": {
"prefix" : "vl-doc-export",
"body": [
"(vl-doc-export ${1:(quote function)})"
],
"description":"使函数在当前文档中可用"
},
"vl-doc-import": {
"prefix" : "vl-doc-import",
"body": [
"(vl-doc-import ${1:application} ${2:[’function} ${3:&rest]})"
],
"description":"将早先输出的函数输入到 VLX 名称空间"
},
"vl-doc-ref": {
"prefix" : "vl-doc-ref",
"body": [
"(vl-doc-ref ${1:(quote symbol)})"
],
"description":"从当前文档名称空间中获取变量的值"
},
"vl-doc-set": {
"prefix" : "vl-doc-set",
"body": [
"(vl-doc-set ${1:(quote symbol)} ${2:value})"
],
"description":"设置当前文档名称空间中变量的值"
},
"vl-every": {
"prefix" : "vl-every",
"body": [
"(vl-every ${1:predicate-function} ${2:list} ${3:[list]} ${4:&rest})"
],
"description":"检查论断结合每个元素后是否均为真"
},
"vl-exit-with-error": {
"prefix" : "vl-exit-with-error",
"body": [
"(vl-exit-with-error ${1:msg})"
],
"description":"将控制从 VLX 错误处理器传递给调用它的名称空间的 *error* 函数"
},
"vl-exit-with-value": {
"prefix" : "vl-exit-with-value",
"body": [
"(vl-exit-with-value ${1:value})"
],
"description":"将值返回到从其他名称空间调用 VLX 的函数"
},
"vl-file-copy": {
"prefix" : "vl-file-copy",
"body": [
"(vl-file-copy ${1:source-file} ${2:destination-file} ${3:[append]})"
],
"description":"将一个文件的内容复制或附加到另一个文件"
},
"vl-file-delete": {
"prefix" : "vl-file-delete",
"body": [
"(vl-file-delete ${1:filename})"
],
"description":"删除文件"
},
"vl-file-directory-p": {
"prefix" : "vl-file-directory-p",
"body": [
"(vl-file-directory-p ${1:path})"
],
"description":"判断文件夹是否存在"
},
"vl-filename-base": {
"prefix" : "vl-filename-base",
"body": [
"(vl-filename-base ${1:filename})"
],
"description":"去掉文件的路径和扩展名，返回文件的名称"
},
"vl-filename-extension": {
"prefix" : "vl-filename-extension",
"body": [
"(vl-filename-extension ${1:filename})"
],
"description":"返回文件的扩展名，而去掉文件名中的其他部分"
},
"vl-filename-mktemp": {
"prefix" : "vl-filename-mktemp",
"body": [
"(vl-filename-mktemp ${1:[pattern} ${2:directory} ${3:extension]})"
],
"description":"为临时文件计算唯一的文件名"
},
"vl-file-rename": {
"prefix" : "vl-file-rename",
"body": [
"(vl-file-rename ${1:old-filename} ${2:new-filename})"
],
"description":"重命名文件"
},
"vl-file-size": {
"prefix" : "vl-file-size",
"body": [
"(vl-file-size ${1:filename})"
],
"description":"确定文件的大小（字节）"
},
"vl-file-systime": {
"prefix" : "vl-file-systime",
"body": [
"(vl-file-systime ${1:filename})"
],
"description":"返回指定文件的上一次修改时间"
},
"vl-get-resource": {
"prefix" : "vl-get-resource",
"body": [
"(vl-get-resource ${1:text-file})"
],
"description":"返回 VLX 中保存的 .txt 文件中的文字"
},
"vl-list-exported-functions": {
"prefix" : "vl-list-exported-functions",
"body": [
"(vl-list-exported-functions ${1:[appname]})"
],
"description":"列出输出的函数"
},
"vl-list-length": {
"prefix" : "vl-list-length",
"body": [
"(vl-list-length ${1:list-or-cons-object})"
],
"description":"计算表的长度"
},
"vl-list->string": {
"prefix" : "vl-list->string",
"body": [
"(vl-list->string ${1:char-codes-list})"
],
"description":"将一系列与整数表相关联的字符组合成字符串 。"
},
"vl-load-all": {
"prefix" : "vl-load-all",
"body": [
"(vl-load-all ${1:filename})"
],
"description":"将文件加载到所有打开的 AutoCAD 文档中,以及在当前 AutoCAD 任务中后续打开的任何文档中"
},
"vl-load-com": {
"prefix" : "vl-load-com",
"body": [
"(vl-load-com)"
],
"description":"将 Visual LISP 扩展功能加载到 * false,false"
},
"vl-load-reactors": {
"prefix" : "vl-load-reactors",
"body": [
"(vl-load-reactors)"
],
"description":"加载反应器支持函数"
},
"vl-member-if": {
"prefix" : "vl-member-if",
"body": [
"(vl-member-if ${1:predicate-function} ${2:list})"
],
"description":"确定论断是否对每一个表成员都正确"
},
"vl-member-if-not": {
"prefix" : "vl-member-if-not",
"body": [
"(vl-member-if-not ${1:predicate-function} ${2:list})"
],
"description":"确定论断是否对表成员中的一个为 nil"
},
"vl-position": {
"prefix" : "vl-position",
"body": [
"(vl-position ${1:symbol} ${2:list})"
],
"description":"返回指定表项目的索引"
},
"vl-prin1-to-string": {
"prefix" : "vl-prin1-to-string",
"body": [
"(vl-prin1-to-string ${1:data})"
],
"description":"返回 LISP 数据的字符串表示，就象它是由 prin1 函数输出的一样"
},
"vl-propagate": {
"prefix" : "vl-propagate",
"body": [
"(vl-propagate ${1:(quote symbol)})"
],
"description":"将变量的值复制到所有打开的文档名称空间（并在当前 AutoCAD 任务中打开的所有后续图形中设置它的值）"
},
"vl-registry-delete": {
"prefix" : "vl-registry-delete",
"body": [
"(vl-registry-delete ${1:reg-key} ${2:[val-name]})"
],
"description":"从 Winows 注册表中删除指定的主键或值"
},
"vl-registry-descendents": {
"prefix" : "vl-registry-descendents",
"body": [
"(vl-registry-descendents ${1:reg-key} ${2:[val-names]})"
],
"description":"返回指定注册表键的子键或值名称的列表"
},
"vl-registry-read": {
"prefix" : "vl-registry-read",
"body": [
"(vl-registry-read ${1:reg-key} ${2:[val-name]})"
],
"description":"对于指定的主键/值对，返回 Winodws 注册表存储的数据"
},
"vl-registry-write": {
"prefix" : "vl-registry-write",
"body": [
"(vl-registry-write ${1:reg-key} ${2:[val-name} ${3:val-data]})"
],
"description":"在 Windows 注册表中创建主键"
},
"vl-remove": {
"prefix" : "vl-remove",
"body": [
"(vl-remove ${1:element-to-remove} ${2:list})"
],
"description":"删除表中的元素"
},
"vl-remove-if": {
"prefix" : "vl-remove-if",
"body": [
"(vl-remove-if ${1:predicate-function} ${2:list})"
],
"description":"返回由所提供表中的所有不满足测试函数的元素组成的表"
},
"vl-remove-if-not": {
"prefix" : "vl-remove-if-not",
"body": [
"(vl-remove-if-not ${1:predicate-function} ${2:list})"
],
"description":"返回由所提供表中的所有能通过测试函数的元素组成的表"
},
"vl-some": {
"prefix" : "vl-some",
"body": [
"(vl-some ${1:predicate-functionlist} ${2:[list]} ${3:&rest})"
],
"description":"检查论断是否对某个元素组合不为 nil"
},
"vl-sort": {
"prefix" : "vl-sort",
"body": [
"(vl-sort ${1:list} ${2:comparison-function})"
],
"description":"根据给定的比较函数来对表中的元素排序"
},
"vl-sort-i": {
"prefix" : "vl-sort-i",
"body": [
"(vl-sort-i ${1:list} ${2:comparison-function})"
],
"description":"根据给定的比较函数对表中的元素排序，并返回元素的索引号"
},
"vl-string-elt": {
"prefix" : "vl-string-elt",
"body": [
"(vl-string-elt ${1:string} ${2:position})"
],
"description":"返回字符串中指定位置字符的 ASCII 表示"
},
"vl-string-left-trim": {
"prefix" : "vl-string-left-trim",
"body": [
"(vl-string-left-trim ${1:char-set} ${2:string})"
],
"description":"返回从源字符串首端开始，挨个删除所提供的字符集中的字符(遇到不属于字符集中的则结束)后的字符串"
},
"vl-string-mismatch": {
"prefix" : "vl-string-mismatch",
"body": [
"(vl-string-mismatch ${1:str1} ${2:str2} ${3:[pos1} ${4:pos2} ${5:ignore-case-p]})"
],
"description":"返回两个字符串中从指定位置开始，最长的共同前缀的长度"
},
"vl-string-position": {
"prefix" : "vl-string-position",
"body": [
"(vl-string-position ${1:char-code} ${2:str} ${3:[start-pos} ${4:[from-end-p]]})"
],
"description":"在字符串中查找具有指定 ASCII 码的字符"
},
"vl-string-right-trim": {
"prefix" : "vl-string-right-trim",
"body": [
"(vl-string-right-trim ${1:char-set} ${2:string})"
],
"description":"返回从源字符串尾端开始，挨个删除所提供的字符集中的字符(遇到不属于字符集中的则结束)后的字符串"
},
"vl-string-search": {
"prefix" : "vl-string-search",
"body": [
"(vl-string-search ${1:pattern} ${2:string} ${3:[start-pos]})"
],
"description":"在字符串中搜索指定子串"
},
"vl-string-subst": {
"prefix" : "vl-string-subst",
"body": [
"(vl-string-subst ${1:new-str} ${2:pattern} ${3:string} ${4:[start-pos]})"
],
"description":"返回从头起或从指定位置起，替换一次子字符串后的字符串"
},
"vl-string-translate": {
"prefix" : "vl-string-translate",
"body": [
"(vl-string-translate ${1:source-set} ${2:dest-set} ${3:str})"
],
"description":"在字符串中替换字符"
},
"vl-string-trim": {
"prefix" : "vl-string-trim",
"body": [
"(vl-string-trim ${1:char-set} ${2:str})"
],
"description":"返回从源字符串首端和尾端开始，分别挨个删除所提供的字符集中的字符(分别遇到不属于字符集中的则分别结束)后的字符串"
},
"vl-symbol-name": {
"prefix" : "vl-symbol-name",
"body": [
"(vl-symbol-name ${1:symbol})"
],
"description":"返回包含某符号名的字符串"
},
"vl-symbolp": {
"prefix" : "vl-symbolp",
"body": [
"(vl-symbolp ${1:object})"
],
"description":"确定指定对象是否为符号"
},
"vl-symbol-value": {
"prefix" : "vl-symbol-value",
"body": [
"(vl-symbol-value ${1:symbol})"
],
"description":"返回当前绑定到符号的值"
},
"vl-unload-vlx": {
"prefix" : "vl-unload-vlx",
"body": [
"(vl-unload-vlx ${1:appname})"
],
"description":"卸载已经加载到自己的名称空间的 VLX 应用程序"
},
"vl-vbaload": {
"prefix" : "vl-vbaload",
"body": [
"(vl-vbaload ${1:filename})"
],
"description":"加载 Visual Basic 工程"
},
"vl-vbarun": {
"prefix" : "vl-vbarun",
"body": [
"(vl-vbarun ${1:macroname})"
],
"description":"运行 Visual Basic 宏"
},
"vl-vlx-loaded-p": {
"prefix" : "vl-vlx-loaded-p",
"body": [
"(vl-vlx-loaded-p ${1:appname})"
],
"description":"确定某独立名称空间当前是否加载"
},
"error": {
"prefix" : "error",
"body": [
"(*error* ${1:msg})"
],
"description":"用户定义的错误处理函数。"
},
"pop-error-mode": {
"prefix" : "pop-error-mode",
"body": [
"(*pop-error-mode*)"
],
"description":"错误处理函数，使用 *push-error-using-command* 或 *push-error-using-stack* 的前一次调用\n 返回T值。\n 在用之前定义的 *error*处理程序替换自定义的*error*处理程序函数后，应调用*pop-error-mode*。\n 注意:在*error*处理程序中使用command-s函数时，不需要此函数。"
},
"push-error-using-command": {
"prefix" : "push-error-using-command",
"body": [
"(*push-error-using-command*)"
],
"description":"错误处理函数，指示在自定义*Error*处理程序中使用命令函数\n 返回T值。\n 在定义包含命令函数用法的自定义*error*处理程序函数后，应使用command*调用*push error。\n 使用命令*push-error-using-command*时，您只能访问全局变量，而不能访问自定义*error*处理程序中发生错误的函数中定义的任何局部变量。如果需要访问局部变量，请将命令函数的任何实例替换为command-s函数，并使用 *push-error-using-stack*代替。\n 注意:在本地自定义*error*处理程序中使用命令函数时，无法使用此函数。"
},
"push-error-using-stack": {
"prefix" : "push-error-using-stack",
"body": [
"(*push-error-using-stack*)"
],
"description":"错误处理函数，指示在自定义*Error*处理程序中使用AutoLISP堆栈中的变量\n Remarks\n Allows access to the local AutoLISP variables on the stack defined within the function where the error occurred from your custom *error* handler. A call to the *push-error-using-stack* function overrides a previous call to *push-error-using-command*.\n If *push-error-using-command* or *push-error-using-stack* are not called, by default AutoLISP works as if *push-error-using-stack* was called.\n 注意:This function cannot be used when the command function is used within the local custom *error* handler."
},
}
