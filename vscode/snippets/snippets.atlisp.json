{
"base64:base64-to-file": {
"prefix" : "base64:base64-to-file",
"body": [
"(base64:base64-to-file ${1:file} ${2:str-base64})"
],
"description":""
},
"base64:decode": {
"prefix" : "base64:decode",
"body": [
"(base64:decode ${1:str-base64})"
],
"description":"Decode base64 string.\n 返回值:list of unsigned 8bit integer."
},
"base64:encode": {
"prefix" : "base64:encode",
"body": [
"(base64:encode ${1:lst-uint8})"
],
"description":"将字节列表内容转为 base64 编码。\n 返回值:String"
},
"base64:encode-from-file": {
"prefix" : "base64:encode-from-file",
"body": [
"(base64:encode-from-file ${1:file})"
],
"description":"将文件 file 转为 base64 编码。文件过大会转换失败。\n 返回值:String"
},
"base:init": {
"prefix" : "base:init",
"body": [
"(base:init)"
],
"description":"@lisp 函数库基本符号及简化函数。为了保证@lisp函数库能正常运行，需先执行该函数。该函数被 @lisp 自动调用。"
},
"block:attach": {
"prefix" : "block:attach",
"body": [
"(block:attach ${1:path} ${2:pt} ${3:ang} ${4:scale})"
],
"description":"附着外部参照。浩辰CAD,中望CAD以块方式插入。"
},
"block:ent-list": {
"prefix" : "block:ent-list",
"body": [
"(block:ent-list ${1:blkname})"
],
"description":"返回块内各图元的列表\n 返回值:图元列表"
},
"block:get-attributes": {
"prefix" : "block:get-attributes",
"body": [
"(block:get-attributes ${1:blk})"
],
"description":"获取块属性,返回属性名和值的点对列表。"
},
"block:get-dynamic-prop-cons-name-value": {
"prefix" : "block:get-dynamic-prop-cons-name-value",
"body": [
"(block:get-dynamic-prop-cons-name-value ${1:blk})"
],
"description":"获取动态块的动态特性与值的点对列表。"
},
"block:get-dynamic-properties": {
"prefix" : "block:get-dynamic-properties",
"body": [
"(block:get-dynamic-properties ${1:blk})"
],
"description":"获取动态块的动态特性(自定义)列表：特性名，当前值，只读性，是否显示，允许值"
},
"block:get-effectivename": {
"prefix" : "block:get-effectivename",
"body": [
"(block:get-effectivename ${1:blk})"
],
"description":"取得块真实名称，支持 MAC"
},
"block:insert": {
"prefix" : "block:insert",
"body": [
"(block:insert ${1:blkname} ${2:path} ${3:pt} ${4:ang} ${5:scale})"
],
"description":"插入块参照，\n blkname 块名，\n path 块文件路径(以/结尾,不含块文件名), \n pt 插入点, \n ang 旋转角度，\n scale 比例。\n 返回值:块实体"
},
"block:list-blk-objs": {
"prefix" : "block:list-blk-objs",
"body": [
"(block:list-blk-objs)"
],
"description":"获取块对象列表\n 返回值:获取块及外部参照对象列表"
},
"block:list-xref-objs": {
"prefix" : "block:list-xref-objs",
"body": [
"(block:list-xref-objs)"
],
"description":"获取外部参照对象列表\n 返回值:外部参照对象列表"
},
"block:readme": {
"prefix" : "block:readme",
"body": [
"(block:readme)"
],
"description":"图块及外部参照操作相关函数。"
},
"block:set-attributes": {
"prefix" : "block:set-attributes",
"body": [
"(block:set-attributes ${1:blk} ${2:lst})"
],
"description":"设置块属性值"
},
"block:set-dynprop": {
"prefix" : "block:set-dynprop",
"body": [
"(block:set-dynprop ${1:blk} ${2:prp} ${3:val})"
],
"description":"设置动态块特性值"
},
"block:ssget": {
"prefix" : "block:ssget",
"body": [
"(block:ssget ${1:blknames} ${2:lst-attr})"
],
"description":"选择满足指定属性标记及对应值的块\n 参数: blknames 块名，或块名列表\n 参数: lst-attr 属性名与值的点对表\n 返回值:满足条件的选择集"
},
"cl:format": {
"prefix" : "cl:format",
"body": [
"(cl:format ${1:stream} ${2:ctrl-string} ${3:variables})"
],
"description":"common lisp 中 功能强大的格式化输出字符串函数。\n 返回值:String"
},
"cl:handle-keywords": {
"prefix" : "cl:handle-keywords",
"body": [
"(cl:handle-keywords)"
],
"description":""
},
"clipboard:cleardata": {
"prefix" : "clipboard:cleardata",
"body": [
"(clipboard:cleardata)"
],
"description":"清空剪贴板内容\n 返回值:-1"
},
"clipboard:getdata": {
"prefix" : "clipboard:getdata",
"body": [
"(clipboard:getdata)"
],
"description":"获取剪贴板内容\n 返回值:string or nil"
},
"clipboard:init": {
"prefix" : "clipboard:init",
"body": [
"(clipboard:init)"
],
"description":"初始化剪贴板对象。"
},
"clipboard:setdata": {
"prefix" : "clipboard:setdata",
"body": [
"(clipboard:setdata ${1:str})"
],
"description":"设置剪贴板内容为 str.\n 返回值:-1"
},
"color:aci2rgb": {
"prefix" : "color:aci2rgb",
"body": [
"(color:aci2rgb ${1:aci})"
],
"description":"索引色转rgb,"
},
"color:rgb": {
"prefix" : "color:rgb",
"body": [
"(color:rgb ${1:red} ${2:green} ${3:blue})"
],
"description":"计算rgb颜色对应的整数值。red green blue 取值范围为 [0,255]的整数或[0,1)的小数。\n 返回值:rgb颜色值"
},
"curve:arc2lwpl": {
"prefix" : "curve:arc2lwpl",
"body": [
"(curve:arc2lwpl ${1:ent-arc} ${2:int})"
],
"description":"将圆弧转换成 由 int 段组成的多段线, int 不小于 1\n 返回值:多段线图元"
},
"curve:bulge2o": {
"prefix" : "curve:bulge2o",
"body": [
"(curve:bulge2o ${1:pt1} ${2:pt2} ${3:bulge})"
],
"description":"求凸度bulge 和两点 pt1 pt2 表示的弧的圆心。"
},
"curve:chain-line": {
"prefix" : "curve:chain-line",
"body": [
"(curve:chain-line ${1:pt1})"
],
"description":""
},
"curve:checkarc": {
"prefix" : "curve:checkarc",
"body": [
"(curve:checkarc ${1:en})"
],
"description":"判断多段线是否有圆弧(凸度/=0)的子段"
},
"curve:circle2lwpl": {
"prefix" : "curve:circle2lwpl",
"body": [
"(curve:circle2lwpl ${1:ent-circle} ${2:int})"
],
"description":"将圆转换成 由 int 段组成的多段线。\n 返回值:多段线图元"
},
"curve:clockwisep": {
"prefix" : "curve:clockwisep",
"body": [
"(curve:clockwisep ${1:ent})"
],
"description":"判断多段线方向\n 返回值:顺时针返回t，反之nil"
},
"curve:get-points": {
"prefix" : "curve:get-points",
"body": [
"(curve:get-points ${1:ent})"
],
"description":"曲线控制点及端点列表，返回点坐标。\n 返回值:点坐标列表"
},
"curve:inters": {
"prefix" : "curve:inters",
"body": [
"(curve:inters ${1:obj1} ${2:obj2} ${3:mode})"
],
"description":"获取对象交点列表\n 参数 obj1 obj2 : 选择集，vla对象，图元名，vla对象表，图元表，nil\n 参数 mode: 该参数只有obj1、obj2为图元或vla对象时，服从下列设置，其他情况均默认对象不延伸\n            obj1 和 obj2 参数可任意组合，但不能全为nil\n            acExtendNone 对象不延伸\n            acExtendThisEntity 延伸obj1\n            acExtendOtherEntity 延伸obj2\n            acExtendBoth 对象都延伸\n            nil = acExtendNone 对象不延伸\n 返回值:对象交点列表"
},
"curve:join": {
"prefix" : "curve:join",
"body": [
"(curve:join ${1:entlst} ${2:fuzz})"
],
"description":"合并多段线函数\n 返回值:return:合并后的多段线图元名"
},
"curve:length": {
"prefix" : "curve:length",
"body": [
"(curve:length ${1:curve})"
],
"description":"参数curve:曲线，直线、圆弧、圆、多段线、优化多段线、样条曲线等图元\n 返回值:曲线的长度"
},
"curve:lwpl-is-circle-p": {
"prefix" : "curve:lwpl-is-circle-p",
"body": [
"(curve:lwpl-is-circle-p ${1:ent})"
],
"description":"检测多段线是否为圆\n 返回值:T or nil"
},
"curve:lwpl-turn-clockwise": {
"prefix" : "curve:lwpl-turn-clockwise",
"body": [
"(curve:lwpl-turn-clockwise ${1:ent})"
],
"description":"反转多段线，调整顺时针或逆时针方向。\n 返回值:新多段线图元"
},
"curve:midpoint": {
"prefix" : "curve:midpoint",
"body": [
"(curve:midpoint ${1:curve})"
],
"description":"求曲线中点\n 返回值:中点坐标"
},
"curve:o2bulge": {
"prefix" : "curve:o2bulge",
"body": [
"(curve:o2bulge ${1:pt1} ${2:pt2} ${3:o})"
],
"description":"求圆心 O 和两点 pt1 pt2 表示的弧的凸度。目前暂时没有考虑方向，及正负。"
},
"curve:optimize-lwpl": {
"prefix" : "curve:optimize-lwpl",
"body": [
"(curve:optimize-lwpl ${1:ent})"
],
"description":"优化多段线顶点。当连续多点共线或共圆时，减少顶点。优化顺时针的多段线有问题待修复。优化会丢失宽度信息！！\n 返回值:优化后的新图元"
},
"curve:param-firstangle": {
"prefix" : "curve:param-firstangle",
"body": [
"(curve:param-firstangle ${1:obj} ${2:param})"
],
"description":"曲线参数param处的切线方向的角度"
},
"curve:param-secondangle": {
"prefix" : "curve:param-secondangle",
"body": [
"(curve:param-secondangle ${1:obj} ${2:param})"
],
"description":"曲线参数param处的法线方向的角度"
},
"curve:pickclosepointto": {
"prefix" : "curve:pickclosepointto",
"body": [
"(curve:pickclosepointto ${1:obj} ${2:p})"
],
"description":"多段线上距离点击点最近的一个顶点"
},
"curve:pline-2dpoints": {
"prefix" : "curve:pline-2dpoints",
"body": [
"(curve:pline-2dpoints ${1:ent})"
],
"description":"多段线端点列表，返回二维点坐标,LWPOLYLINE组码本来就是二维点。\n 返回值:二维点坐标列表"
},
"curve:pline-3dpoints": {
"prefix" : "curve:pline-3dpoints",
"body": [
"(curve:pline-3dpoints ${1:ent})"
],
"description":"多段线端点列表，返回三维点坐标。注意：当多段线为闭合时，最终点为起始点，比图元多一个点。\n 返回值:三维点坐标列表"
},
"curve:pline-convexity": {
"prefix" : "curve:pline-convexity",
"body": [
"(curve:pline-convexity ${1:ent})"
],
"description":"多段线凸度列表。\n 返回值:数值列表"
},
"curve:point-firstangle": {
"prefix" : "curve:point-firstangle",
"body": [
"(curve:point-firstangle ${1:obj} ${2:pt})"
],
"description":"曲线一点的切线方向的角度"
},
"curve:point-secondangle": {
"prefix" : "curve:point-secondangle",
"body": [
"(curve:point-secondangle ${1:obj} ${2:pt})"
],
"description":"曲线一点的法线方向的角度"
},
"curve:pt-in-arc-p": {
"prefix" : "curve:pt-in-arc-p",
"body": [
"(curve:pt-in-arc-p ${1:pt} ${2:pt1} ${3:pt2} ${4:convexity})"
],
"description":"判断 点 pt 是否在 pt1 pt2 及 凸度 表示的圆弧上。"
},
"curve:ptoncurve": {
"prefix" : "curve:ptoncurve",
"body": [
"(curve:ptoncurve ${1:pt} ${2:curve})"
],
"description":"判断点是否在曲线上\n 返回值:T or nil"
},
"curve:putclosed": {
"prefix" : "curve:putclosed",
"body": [
"(curve:putclosed ${1:obj})"
],
"description":"使多段线封闭\n 返回值:无"
},
"curve:readme": {
"prefix" : "curve:readme",
"body": [
"(curve:readme)"
],
"description":"曲线操作相关函数。"
},
"curve:rectangle-center": {
"prefix" : "curve:rectangle-center",
"body": [
"(curve:rectangle-center ${1:en})"
],
"description":"矩形中点坐标"
},
"curve:subsegment-length": {
"prefix" : "curve:subsegment-length",
"body": [
"(curve:subsegment-length ${1:obj} ${2:pt1} ${3:pt2})"
],
"description":"多段线子段长度"
},
"curve:subsegment-parameter": {
"prefix" : "curve:subsegment-parameter",
"body": [
"(curve:subsegment-parameter ${1:curve} ${2:pt})"
],
"description":"多段线子段参数"
},
"curve:subsegment-picked-param": {
"prefix" : "curve:subsegment-picked-param",
"body": [
"(curve:subsegment-picked-param ${1:obj} ${2:p})"
],
"description":"多段线所点击子段参数"
},
"curve:subsegment-picked-points": {
"prefix" : "curve:subsegment-picked-points",
"body": [
"(curve:subsegment-picked-points ${1:obj} ${2:p})"
],
"description":"多段线所点击子段的两端点列表"
},
"curve:subsegment-picked-type": {
"prefix" : "curve:subsegment-picked-type",
"body": [
"(curve:subsegment-picked-type ${1:curve} ${2:p})"
],
"description":"多段线子段图元类型"
},
"curve:subsegment-points": {
"prefix" : "curve:subsegment-points",
"body": [
"(curve:subsegment-points ${1:curve} ${2:n})"
],
"description":"多段线第n子段的端点坐标"
},
"curve:subsegments": {
"prefix" : "curve:subsegments",
"body": [
"(curve:subsegments ${1:obj})"
],
"description":"多段线子段数"
},
"datetime:current-time": {
"prefix" : "datetime:current-time",
"body": [
"(datetime:current-time ${1:str-fmt})"
],
"description":"格式化日期时间，yyyy 年 mo 月 dd 日 hh 时 mm 分 ss 秒\n 返回值:日期时间字符串"
},
"datetime:get-current-day": {
"prefix" : "datetime:get-current-day",
"body": [
"(datetime:get-current-day)"
],
"description":"返回日期"
},
"datetime:get-current-month": {
"prefix" : "datetime:get-current-month",
"body": [
"(datetime:get-current-month)"
],
"description":"返回月份"
},
"datetime:get-current-year": {
"prefix" : "datetime:get-current-year",
"body": [
"(datetime:get-current-year)"
],
"description":"返回年份"
},
"datetime:get-universal-time": {
"prefix" : "datetime:get-universal-time",
"body": [
"(datetime:get-universal-time)"
],
"description":"返回世界时，格林维治时间.自1900年1月1日到现在的秒数\n 返回值:Int"
},
"datetime:leap-yearp": {
"prefix" : "datetime:leap-yearp",
"body": [
"(datetime:leap-yearp ${1:year})"
],
"description":"判断某个是否为闰年。"
},
"datetime:mktime": {
"prefix" : "datetime:mktime",
"body": [
"(datetime:mktime ${1:lst})"
],
"description":"计算某一时间(列表)到1970年01月01日经过的秒数,适合转换vl-file-systime的结果\n 返回值:Timestamp"
},
"datetime:mktime1900": {
"prefix" : "datetime:mktime1900",
"body": [
"(datetime:mktime1900 ${1:timestamp})"
],
"description":"unix timestamp 转 到1900年01月01日经过的秒数.\n 返回值:real"
},
"datetime:rfc1123-to-lisp": {
"prefix" : "datetime:rfc1123-to-lisp",
"body": [
"(datetime:rfc1123-to-lisp ${1:str})"
],
"description":"将RFC1123格式转化为 autolisp 表格式\n 返回值:list"
},
"dcl:accept": {
"prefix" : "dcl:accept",
"body": [
"(dcl:accept)"
],
"description":""
},
"dcl:begin-cluster": {
"prefix" : "dcl:begin-cluster",
"body": [
"(dcl:begin-cluster ${1:cluster-type} ${2:label})"
],
"description":"开始 dcl 容器类控件。与 dcl:end-cluster 成对使用。cluster-type: row,column,boxed_row,boxed_column,boxed_radio_row,boxed_radio_column"
},
"dcl:button": {
"prefix" : "dcl:button",
"body": [
"(dcl:button ${1:key} ${2:label} ${3:style})"
],
"description":"dcl 按钮。"
},
"dcl:cell": {
"prefix" : "dcl:cell",
"body": [
"(dcl:cell ${1:key} ${2:rows} ${3:columns} ${4:show-line-number?} ${5:show-column-number?} ${6:show-scrollbar?} ${7:header-title?})"
],
"description":"创建 DCL 可编辑表格.\n 参数: 1. key: 标识\n       2. rows:显示行数，\n       3. columns 显示列数(不大于26), \n       4. show-line-number? : 是否显示行号， \n       5. show-column-number?  : 是否显示列号A~Z，\n       6. show-scrollbar? : 是否显示竖向滚动条. \n       7. fixed-title? ,在第一行固定显示标题。\n \n tile-key: scrollbar header1 header2 headern, A1 B1 ... Z1 , A2 B2 ... Z2 , A99 B99 ... Z99 ......\n Model部: tbl-widths: 列宽表;cell-data 列表数据;\n Control部: (cb-scrollbar)\n 返回值:DCL格式字符串"
},
"dcl:dialog": {
"prefix" : "dcl:dialog",
"body": [
"(dcl:dialog ${1:name})"
],
"description":"创建名为 name 的对话框文件。外部变量: dcl-tmp 含路径的文件名. dcl-fp 文件指针。 "
},
"dcl:dialog-end-ok-cancel": {
"prefix" : "dcl:dialog-end-ok-cancel",
"body": [
"(dcl:dialog-end-ok-cancel)"
],
"description":"带okcancel结束DCL文件并关闭文件指针。"
},
"dcl:end-cluster": {
"prefix" : "dcl:end-cluster",
"body": [
"(dcl:end-cluster)"
],
"description":"开始 dcl 容器类控件。与 dcl:begin-cluster 成对使用。"
},
"dcl:end-dialog": {
"prefix" : "dcl:end-dialog",
"body": [
"(dcl:end-dialog ${1:str-yes-no})"
],
"description":"完成创建DCL文件并关闭文件指针。\n 参数 str-Yes-No 字符串用 - 分隔成两部分，前面为accept,后面为 Cancel.如 是-否，愿意-不愿意。"
},
"dcl:error": {
"prefix" : "dcl:error",
"body": [
"(dcl:error ${1:msg})"
],
"description":"dcl 系列函数的错误处理，当dcl 运行出错后的一系列扫尾工作，防止对话框无法关闭而只能强行结束任务的情况。"
},
"dcl:hr": {
"prefix" : "dcl:hr",
"body": [
"(dcl:hr ${1:size})"
],
"description":"DCL 水平线,粗度 size 值 推荐为 0.08(一个像素),0.17(两个像素).\n 返回值:dcl格式字符串"
},
"dcl:img": {
"prefix" : "dcl:img",
"body": [
"(dcl:img ${1:key} ${2:width} ${3:height})"
],
"description":"dcl 图像控件。"
},
"dcl:mtext": {
"prefix" : "dcl:mtext",
"body": [
"(dcl:mtext ${1:key} ${2:rows} ${3:width})"
],
"description":"带条格的多行文本。对赋传下的一段字符串自行换行处理。"
},
"dcl:new": {
"prefix" : "dcl:new",
"body": [
"(dcl:new ${1:name})"
],
"description":"载入DCL，并创建对话框名为 name 的对象。"
},
"dcl:paging": {
"prefix" : "dcl:paging",
"body": [
"(dcl:paging ${1:h-or-v})"
],
"description":"DCL 分页模块，key为 prev, next, curr_total. \n 参数 h-or-v : t 为 水平，nil 为竖向.\n Model部外部变量说明: curr-page:当前页号, total-page :总页数。\n Control部回调函数定义: (cb-flush-page)\n   页面更新。\n Init部: (paging-init)初始化按钮使能\n 返回值:dcl格式字符串。"
},
"dcl:progressbar": {
"prefix" : "dcl:progressbar",
"body": [
"(dcl:progressbar ${1:key} ${2:style} ${3:show-txt?})"
],
"description":"dcl 进度条。"
},
"dcl:scrollbar": {
"prefix" : "dcl:scrollbar",
"body": [
"(dcl:scrollbar ${1:key} ${2:style} ${3:h-or-v})"
],
"description":""
},
"dcl:set-mtext": {
"prefix" : "dcl:set-mtext",
"body": [
"(dcl:set-mtext ${1:key} ${2:value})"
],
"description":"给 mtext 控件赋值，自动换行。当 value 的长度大于 mtext 可以容纳的长度时，结尾加 ... 号。"
},
"dcl:set-progressbar": {
"prefix" : "dcl:set-progressbar",
"body": [
"(dcl:set-progressbar ${1:key} ${2:value})"
],
"description":"设置 dcl 进度条的值。"
},
"dcl:show": {
"prefix" : "dcl:show",
"body": [
"(dcl:show)"
],
"description":"显示dcl对话框"
},
"demo:demo": {
"prefix" : "demo:demo",
"body": [
"(demo:demo ${1:lst} ${2:pt})"
],
"description":"这是一个演示，没有实际功能，只用于测试\n 返回值:String"
},
"entity:activedimstyle": {
"prefix" : "entity:activedimstyle",
"body": [
"(entity:activedimstyle ${1:dimname})"
],
"description":"激活指定的标注样式。dimname:标注样式名"
},
"entity:activelayer": {
"prefix" : "entity:activelayer",
"body": [
"(entity:activelayer ${1:name})"
],
"description":"设置指定层为当前层.  name:图层名\n 返回值:成功返回t，失败返回nil"
},
"entity:add-entitys-to-block": {
"prefix" : "entity:add-entitys-to-block",
"body": [
"(entity:add-entitys-to-block ${1:block} ${2:ss})"
],
"description":"添加选择集到块定义。"
},
"entity:addhatch": {
"prefix" : "entity:addhatch",
"body": [
"(entity:addhatch ${1:outarray} ${2:inarray} ${3:name})"
],
"description":"创建填充。outArray:外边界对象表，inArray:内边界对象表，name:充填名称\n 返回值:填充体对象"
},
"entity:addtext": {
"prefix" : "entity:addtext",
"body": [
"(entity:addtext ${1:str} ${2:pt} ${3:zg} ${4:ang} ${5:dq})"
],
"description":"生成一个TEXT实体,entity:make-text参数简化版\n 返回值:return:文字图元名"
},
"entity:block": {
"prefix" : "entity:block",
"body": [
"(entity:block ${1:ss} ${2:name} ${3:insertionpoint})"
],
"description":"将选择集、图元表、对象表创建为块。"
},
"entity:change-ltype": {
"prefix" : "entity:change-ltype",
"body": [
"(entity:change-ltype ${1:obj} ${2:strltype})"
],
"description":"改变对象线型\n 参数:\n obj:对象\n strLtype:线型\n 返回值:成功返回T，失败返回nil"
},
"entity:change-textstyle": {
"prefix" : "entity:change-textstyle",
"body": [
"(entity:change-textstyle ${1:textstylename} ${2:fontname} ${3:bigfontname})"
],
"description":"更改指定字体样式的字体\n 参数:\n TextStyleName:字体样式名称\n FontName:字体名字\n BigFontName:大字体名字\n 返回值:无"
},
"entity:check-error-codes": {
"prefix" : "entity:check-error-codes",
"body": [
"(entity:check-error-codes ${1:doc})"
],
"description":"消除字体乱码，利用gbenor.shx gbcbig.shx\n 参数:\n doc:当前活动文档\n 返回值:无"
},
"entity:deldxf": {
"prefix" : "entity:deldxf",
"body": [
"(entity:deldxf ${1:ename} ${2:code})"
],
"description":"删除图元的某一组码，用于操作颜色等不是必段的组码。\n 参数:\n ename:图元，选择集，图元列表\n code:组码或组码表\n \n 返回值:更新后的图元，选择集，图元列表"
},
"entity:dimaligned": {
"prefix" : "entity:dimaligned",
"body": [
"(entity:dimaligned ${1:p1} ${2:p2} ${3:txtpt})"
],
"description":"创建对齐标注"
},
"entity:dimdiameter": {
"prefix" : "entity:dimdiameter",
"body": [
"(entity:dimdiameter ${1:pt1} ${2:pt2} ${3:pt-txt})"
],
"description":"生成直径标注\n 返回值:return:标注图元名"
},
"entity:dimhorizontal": {
"prefix" : "entity:dimhorizontal",
"body": [
"(entity:dimhorizontal ${1:pt1} ${2:pt2} ${3:pt-txt})"
],
"description":"生成水平标注\n 返回值:return:标注图元名"
},
"entity:dimradius": {
"prefix" : "entity:dimradius",
"body": [
"(entity:dimradius ${1:pt-cen} ${2:pt-r})"
],
"description":"生成半径标注\n 返回值:return:标注图元名"
},
"entity:dimvertical": {
"prefix" : "entity:dimvertical",
"body": [
"(entity:dimvertical ${1:p1} ${2:p2} ${3:txtpt})"
],
"description":"创建竖向标注"
},
"entity:fontstyle_set": {
"prefix" : "entity:fontstyle_set",
"body": [
"(entity:fontstyle_set ${1:st_name} ${2:h})"
],
"description":"验证字体样式是否存在，若不存在，则新建字体样式\n 参数：\n st_name : 文字样式名\n h : 字高"
},
"entity:get-color": {
"prefix" : "entity:get-color",
"body": [
"(entity:get-color ${1:ent})"
],
"description":"获取图元的颜色，当颜色随层时，返回图层颜色。"
},
"entity:get-layer": {
"prefix" : "entity:get-layer",
"body": [
"(entity:get-layer ${1:ent})"
],
"description":"获取图元的图层名\n 返回值:String"
},
"entity:get-linetype": {
"prefix" : "entity:get-linetype",
"body": [
"(entity:get-linetype ${1:ent})"
],
"description":"获取图元的线型，当线型随层时，返回图层线型。\n 返回值:String"
},
"entity:getbox": {
"prefix" : "entity:getbox",
"body": [
"(entity:getbox ${1:ent} ${2:offset})"
],
"description":"图元的最小包围盒\n 返回值:return:外框（偏移后）的左下，右上角点"
},
"entity:getdxf": {
"prefix" : "entity:getdxf",
"body": [
"(entity:getdxf ${1:ent} ${2:i})"
],
"description":"获取图元的组码值\n 参数:\n ent:图元名或vla对象名\n i:组码或组码表\n 返回值:组码值或列表"
},
"entity:gettable": {
"prefix" : "entity:gettable",
"body": [
"(entity:gettable ${1:s})"
],
"description":""
},
"entity:gettextbox": {
"prefix" : "entity:gettextbox",
"body": [
"(entity:gettextbox ${1:ent-text} ${2:offset})"
],
"description":"获取单行文本包围框\n 返回值:return:文字外框（偏移后）的四个角点（左下，右下，右上，左上"
},
"entity:group": {
"prefix" : "entity:group",
"body": [
"(entity:group ${1:lst} ${2:name})"
],
"description":"将实体集编组"
},
"entity:layers": {
"prefix" : "entity:layers",
"body": [
"(entity:layers)"
],
"description":"获取图层列表"
},
"entity:line": {
"prefix" : "entity:line",
"body": [
"(entity:line ${1:start} ${2:end})"
],
"description":"在模型空间画直线"
},
"entity:linetypes": {
"prefix" : "entity:linetypes",
"body": [
"(entity:linetypes)"
],
"description":""
},
"entity:listcollection": {
"prefix" : "entity:listcollection",
"body": [
"(entity:listcollection ${1:collection})"
],
"description":"列集合"
},
"entity:ltype-exists": {
"prefix" : "entity:ltype-exists",
"body": [
"(entity:ltype-exists ${1:strltype})"
],
"description":"线型是否存在?\n 参数:\n strLtype:线型名\n 返回值:成功返回t，失败返回nil"
},
"entity:make-arc": {
"prefix" : "entity:make-arc",
"body": [
"(entity:make-arc ${1:cen} ${2:rad} ${3:startpt} ${4:endpt})"
],
"description":"创建圆弧"
},
"entity:make-arrow": {
"prefix" : "entity:make-arrow",
"body": [
"(entity:make-arrow ${1:startpt} ${2:endpt} ${3:width})"
],
"description":"生成箭头,一端宽，一端窄的多段线。\n 参数:\n    startpt:箭头尖坐标\n    endpt:箭头尾坐标\n    width:箭头尾宽度\n 返回值:\n   箭头图元名\n "
},
"entity:make-circle": {
"prefix" : "entity:make-circle",
"body": [
"(entity:make-circle ${1:pts-cen} ${2:num-rad})"
],
"description":"创建圆.如果圆心是点的列表或半径是数值的列表，可以同时创建多个圆\n 返回值:Ename"
},
"entity:make-dimstyle": {
"prefix" : "entity:make-dimstyle",
"body": [
"(entity:make-dimstyle ${1:name})"
],
"description":"创建标注样式,name:标注样式名"
},
"entity:make-layer": {
"prefix" : "entity:make-layer",
"body": [
"(entity:make-layer ${1:strname} ${2:intcolor} ${3:strltype} ${4:boolecur})"
],
"description":"创建图层\n 参数:\n strName:图层名\n intColor:图层颜色\n strLtype:图层线型\n booleCur:是否置为当前图层\n 返回值:成功返回图层名，失败返回nil"
},
"entity:make-leader": {
"prefix" : "entity:make-leader",
"body": [
"(entity:make-leader ${1:startpt} ${2:endpt})"
],
"description":"创建无标记的箭头标注"
},
"entity:make-line": {
"prefix" : "entity:make-line",
"body": [
"(entity:make-line ${1:startpt} ${2:endpt})"
],
"description":"两点创建直线"
},
"entity:make-lines": {
"prefix" : "entity:make-lines",
"body": [
"(entity:make-lines ${1:pts})"
],
"description":"按多个点坐标创建连续直线"
},
"entity:make-lwpline-bold": {
"prefix" : "entity:make-lwpline-bold",
"body": [
"(entity:make-lwpline-bold ${1:plist} ${2:convexity} ${3:elevation} ${4:closed} ${5:bold})"
],
"description":"生成固定宽度的二维多段线.LWPOLYLINE\n 参数:\n    plist:端点坐标点表，如：((x1 y1 z1)(x2 y2 z2)(x2 y2 z2))或((x1 y1)(x2 y2)(x2 y2))\n    convexity:各点与下一点的凸度(个数同坐标点表)，可为nil\n    elevation:标高\n    closed:是否闭合，1:闭合，0：不闭合\n 返回值:返回值: 生成的多段线的图元名"
},
"entity:make-lwpolyline": {
"prefix" : "entity:make-lwpolyline",
"body": [
"(entity:make-lwpolyline ${1:plist} ${2:convexity} ${3:linewidth} ${4:closed} ${5:elevation})"
],
"description":"生成二维多段线.LWPOLYLINE\n 参数:\n   plist:端点坐标点表，如：((x1 y1 z1) (x2 y2 z2) (x2 y2 z2))或((x1 y1) (x2 y2) (x2 y2))\n   convexity:各点与下一点的凸度(个数同坐标点表)，可为nil\n   linewidth : 宽度,当为数值时，为全局宽度，当为表时，为各段宽度。\n   closed:是否闭合，1:闭合，0：不闭合\n   elevation:标高\n 返回值:返回值: 生成多段线的图元名"
},
"entity:make-pline": {
"prefix" : "entity:make-pline",
"body": [
"(entity:make-pline ${1:plist} ${2:convexity} ${3:elevation} ${4:closed})"
],
"description":"生成二维多段线.POLYLINE\n 参数:\n   plist:端点坐标点表，如：((x1 y1 z1)\n     (x2 y2 z2)\n     (x2 y2 z2))或((x1 y1)\n     (x2 y2)\n     (x2 y2))\n   convexity:各点与下一点的凸度(个数同坐标点表)，可为nil\n   elevation:标高\n   closed:是否闭合，1:闭合，0：不闭合\n 返回值:返回值:  生成多段线的图元名"
},
"entity:make-point": {
"prefix" : "entity:make-point",
"body": [
"(entity:make-point ${1:pt})"
],
"description":"根据参数坐标绘制一个点"
},
"entity:make-polyline": {
"prefix" : "entity:make-polyline",
"body": [
"(entity:make-polyline ${1:pts} ${2:closed})"
],
"description":"生成三维多段线.POLYLINE\n 参数:\n   pts:端点坐标点表，如：((x1 y1 z1)\n     (x2 y2 z2)\n     (x2 y2 z2))\n   closed:是否闭合，1:闭合，0：不闭合\n 返回值:生成多段线的图元名"
},
"entity:make-polyline-ax": {
"prefix" : "entity:make-polyline-ax",
"body": [
"(entity:make-polyline-ax ${1:pts-3d} ${2:closed?})"
],
"description":"根据点表生成polyline，三维多段线。参数:closed? T or nil.ActiveX 方法。\n 返回值:三维POLYLINE图元"
},
"entity:make-rectangle": {
"prefix" : "entity:make-rectangle",
"body": [
"(entity:make-rectangle ${1:pt1} ${2:pt2})"
],
"description":"创建矩形框(水平，竖直方向)"
},
"entity:make-tag": {
"prefix" : "entity:make-tag",
"body": [
"(entity:make-tag ${1:pt} ${2:name})"
],
"description":"生成一个标签"
},
"entity:make-text": {
"prefix" : "entity:make-text",
"body": [
"(entity:make-text ${1:str} ${2:pt1} ${3:fontsize} ${4:ang} ${5:kgb} ${6:qx} ${7:dqys})"
],
"description":"生成一个TEXT单行文本.\n 参数说明：\n fontsize: 字高\n ang: 角度\n kgb: 宽高比\n qx: 倾斜角\n dqys: 对齐方式，L 左 M 中 R 右，T 上 M 中 B 下。\n \n 返回值:return:文字图元名"
},
"entity:make-textstyle": {
"prefix" : "entity:make-textstyle",
"body": [
"(entity:make-textstyle ${1:name})"
],
"description":"创建文字样式。"
},
"entity:offset": {
"prefix" : "entity:offset",
"body": [
"(entity:offset ${1:obj} ${2:dis})"
],
"description":"偏移对象"
},
"entity:onlockedlayer": {
"prefix" : "entity:onlockedlayer",
"body": [
"(entity:onlockedlayer ${1:ename})"
],
"description":"解锁图元所在的图层"
},
"entity:putdxf": {
"prefix" : "entity:putdxf",
"body": [
"(entity:putdxf ${1:ename} ${2:code} ${3:val})"
],
"description":"更新图元的组码值\n 参数:\n ename:图元，选择集，图元列表\n code:组码或组码表\n val:值或者值表\n 返回值:更新后的图元，选择集，图元列表"
},
"entity:readme": {
"prefix" : "entity:readme",
"body": [
"(entity:readme)"
],
"description":"图元操作相关函数。"
},
"entity:spline": {
"prefix" : "entity:spline",
"body": [
"(entity:spline ${1:pts})"
],
"description":""
},
"entity:textstyles": {
"prefix" : "entity:textstyles",
"body": [
"(entity:textstyles)"
],
"description":"文字样式集合"
},
"entity:to-obj": {
"prefix" : "entity:to-obj",
"body": [
"(entity:to-obj ${1:en0})"
],
"description":"图元类型转为ActiveX对象,e2o"
},
"env:set-bg-color": {
"prefix" : "env:set-bg-color",
"body": [
"(env:set-bg-color ${1:col})"
],
"description":"设置绘图区背景色\n 返回值:无"
},
"env:set-cross-color": {
"prefix" : "env:set-cross-color",
"body": [
"(env:set-cross-color)"
],
"description":""
},
"example:dcl-cell": {
"prefix" : "example:dcl-cell",
"body": [
"(example:dcl-cell)"
],
"description":"MVCNIS 方法: 6 步进行动态 DCL 开发。表格示例。Model-View-Control-New-Init-Show."
},
"example:dcl-dialog": {
"prefix" : "example:dcl-dialog",
"body": [
"(example:dcl-dialog)"
],
"description":"MVCNIS 法: 6 步进行动态 DCL 开发。"
},
"example:dcl-modify-title": {
"prefix" : "example:dcl-modify-title",
"body": [
"(example:dcl-modify-title)"
],
"description":"dcl改标题示例"
},
"example:dcl-mtext": {
"prefix" : "example:dcl-mtext",
"body": [
"(example:dcl-mtext)"
],
"description":"MVCNIS 法: 6 步进行动态 DCL 开发之多行文本"
},
"example:dcl-mtext2": {
"prefix" : "example:dcl-mtext2",
"body": [
"(example:dcl-mtext2)"
],
"description":"MVCNIS 方法: 6 步进行动态 DCL 开发。Model-View-Control-New-Init-Show."
},
"example:dcl-progressbar": {
"prefix" : "example:dcl-progressbar",
"body": [
"(example:dcl-progressbar)"
],
"description":"MVCNIS 法: 6 步进行动态 DCL 开发之进度条"
},
"example:dcl-progressbar2": {
"prefix" : "example:dcl-progressbar2",
"body": [
"(example:dcl-progressbar2)"
],
"description":"MVCNIS 法: 6 步进行动态 DCL 开发之进度条"
},
"example:dcl1": {
"prefix" : "example:dcl1",
"body": [
"(example:dcl1)"
],
"description":"MVCNIS 法: 6 步进行动态 DCL 开发。"
},
"example:error-exit": {
"prefix" : "example:error-exit",
"body": [
"(example:error-exit ${1:para})"
],
"description":"函数错误处理方案示例 *error* 定义私有函数，隔绝公共域 *error* ，使之不用重定义。\n 参数 para .为 t 时执行正常流程，为 nil 时，执行错误处理流程。"
},
"example:grread": {
"prefix" : "example:grread",
"body": [
"(example:grread)"
],
"description":"grread 编程示例，当按下键盘时，弹窗提示按的什么键，否则显示光标的坐标"
},
"example:multi-platform": {
"prefix" : "example:multi-platform",
"body": [
"(example:multi-platform)"
],
"description":"多平台开发示例，如果你希望你的代码能在多种CAD平台（如autocad,浩辰CAD,中望CAD等）上运行。因为兼容性问题，需要处理一些特殊的代码段。以适应不同的平台"
},
"example:sort": {
"prefix" : "example:sort",
"body": [
"(example:sort)"
],
"description":"排序示例.用于演示 vl-sort 自定义排序函数的代码。n1 n2 表示 列表内任意两个数，lambda 对这两个数进行比较。根据比较结果进行排序。\n 返回值:偶数从大到小，奇数从小到大,偶数在前"
},
"excel:add-sheet": {
"prefix" : "excel:add-sheet",
"body": [
"(excel:add-sheet ${1:xlapp} ${2:name})"
],
"description":"添加个工作表\n 参数:XLApp:已打开的excel文件对象\n 参数:Name:工作表名\n 返回值:成功返回t"
},
"excel:delete-sheet": {
"prefix" : "excel:delete-sheet",
"body": [
"(excel:delete-sheet ${1:xlapp} ${2:name})"
],
"description":"说明:删除工作表\n 参数:XLApp:已打开的excel文件对象\n 参数:Name:工作表名\n 返回值:成功返回t"
},
"excel:get-activesheet": {
"prefix" : "excel:get-activesheet",
"body": [
"(excel:get-activesheet ${1:xlapp})"
],
"description":"获取当前工作表的名字\n 参数:XLApp:打开的excel文件对象\n 返回值:名字字符串"
},
"excel:get-backcolor": {
"prefix" : "excel:get-backcolor",
"body": [
"(excel:get-backcolor ${1:xlapp} ${2:index})"
],
"description":"获取充填色\n 参数:xlapp:已打开的excel文件对象\n 参数:index:区域索引，A1引用格式或者行列表\n 返回值:颜色索引字符串 0-56 号"
},
"excel:get-mergeindex": {
"prefix" : "excel:get-mergeindex",
"body": [
"(excel:get-mergeindex ${1:xlapp} ${2:index})"
],
"description":"获取合并单元格的索引\n 参数:xlapp:已打开的excel文件对象\n 参数:index:区域索引，A1引用格式或者行列表\n 返回值:A1格式的索引"
},
"excel:get-property": {
"prefix" : "excel:get-property",
"body": [
"(excel:get-property ${1:obj} ${2:prop})"
],
"description":"检索 VLA 对象的特性\n 参数:obj:vla对象\n 参数:prop:符号或字符串，标识要检索的特性，字符串的时候可以直接调用多级特性：\"Rows.Count\"\n 返回值:特性的值"
},
"excel:get-range": {
"prefix" : "excel:get-range",
"body": [
"(excel:get-range ${1:xlapp} ${2:index})"
],
"description":"说明:根据索引获取range对象\n 参数:xlapp:已打开的excel文件对象\n 参数:index:区域索引，A1引用格式或者行列表\n 返回值:range对象"
},
"excel:get-rangeindex": {
"prefix" : "excel:get-rangeindex",
"body": [
"(excel:get-rangeindex ${1:range})"
],
"description":"获取range的索引\n 参数:range:range对象\n 返回值:A1格式的索引"
},
"excel:get-rangevalue": {
"prefix" : "excel:get-rangevalue",
"body": [
"(excel:get-rangevalue ${1:xlapp} ${2:index})"
],
"description":"获取单元格或区域的值\n 参数:XLApp:已打开的excel文件对象\n 参数:index:位置信息，如\"A1\"或者'(1 1), \"A1:B2\"或者'(1 1 2 2)\n 返回值:值的列表"
},
"excel:get-selection": {
"prefix" : "excel:get-selection",
"body": [
"(excel:get-selection ${1:xlapp})"
],
"description":"获取选择区域的索引\n 参数:xlapp:已打开的excel文件对象\n 返回值:A1格式的索引"
},
"excel:get-usedrange": {
"prefix" : "excel:get-usedrange",
"body": [
"(excel:get-usedrange ${1:xlapp} ${2:name})"
],
"description":"获取已使用的range区域\n 参数:XLApp:已打开的excel文件对象\n 参数:Name:工作表名\n 返回值:成功返回range对象"
},
"excel:merge-range": {
"prefix" : "excel:merge-range",
"body": [
"(excel:merge-range ${1:xlapp} ${2:index})"
],
"description":"合并单元格\n 参数:xlapp:已打开的excel文件对象\n 参数:index:区域索引，A1引用格式或者行列表"
},
"excel:new": {
"prefix" : "excel:new",
"body": [
"(excel:new ${1:ishide})"
],
"description":"新建Excel工作簿\n 参数:ishide:是否可见，t为可见，nil为不可见\n 返回值:一个表示Excel工作簿的vla对象"
},
"excel:open": {
"prefix" : "excel:open",
"body": [
"(excel:open ${1:filename} ${2:ishide})"
],
"description":"打开一个excel文件\n 参数:Filename:文件路径\n 参数:ishide:是否可见，t为可见，nil为不可见\n 返回值:一个表示打开的excel文件的vla对象"
},
"excel:quit": {
"prefix" : "excel:quit",
"body": [
"(excel:quit ${1:exlobj} ${2:saveyn})"
],
"description":"退出excel\n 参数:ExlObj:打开的excel对象\n 参数:SaveYN:是否保存，t为保存，nil为不保存"
},
"excel:quit-all": {
"prefix" : "excel:quit-all",
"body": [
"(excel:quit-all ${1:saveyn})"
],
"description":"退出所有打开的excel文件\n 参数:SaveYN:是否保存"
},
"excel:range-mergep": {
"prefix" : "excel:range-mergep",
"body": [
"(excel:range-mergep ${1:xlapp} ${2:index})"
],
"description":"判断是否是合并单元格\n 参数:xlapp:已打开的excel文件对象\n 参数:index:区域索引，A1引用格式或者行列表\n 返回值:是，返回t，否，返回nil"
},
"excel:rename-sheet": {
"prefix" : "excel:rename-sheet",
"body": [
"(excel:rename-sheet ${1:xlapp} ${2:old} ${3:new})"
],
"description":"说明:重命名工作表\n 参数:XLApp:已打开的excel文件对象\n 参数:Old:工作表原名\n 参数:New:工作表新名\n 返回值:成功返回t"
},
"excel:save": {
"prefix" : "excel:save",
"body": [
"(excel:save ${1:xlsapp})"
],
"description":"保存当前工作簿\n 参数:xlsApp:当前工作簿对象\n 返回值:正确保存应该返回t，错误返回nil"
},
"excel:saveas": {
"prefix" : "excel:saveas",
"body": [
"(excel:saveas ${1:xlapp} ${2:filename})"
],
"description":"另存为excel文件\n 参数:XLApp:已打开的excel文件对象\n 参数:Filename:另存为的文件路径"
},
"excel:set-activesheet": {
"prefix" : "excel:set-activesheet",
"body": [
"(excel:set-activesheet ${1:xlapp} ${2:name})"
],
"description":"设置活动工作表\n 参数:XLApp:已打开的excel文件对象\n 参数:Name:工作表名\n 返回值:成功返回t"
},
"excel:set-backcolor": {
"prefix" : "excel:set-backcolor",
"body": [
"(excel:set-backcolor ${1:xlapp} ${2:index} ${3:colorindex})"
],
"description":"设置充填色\n 参数:xlapp:已打开的excel文件对象\n 参数:index:区域索引，A1引用格式或者行列表\n 参数:colorindex:颜色索引0-56号"
},
"excel:set-rangevalue": {
"prefix" : "excel:set-rangevalue",
"body": [
"(excel:set-rangevalue ${1:xlapp} ${2:index} ${3:value})"
],
"description":"设置单元格或区域的值\n 参数:XLApp:已打开的excel文件对象\n 参数:index:位置信息，如\"A1\"或者'(1 1), \"A1:B2\"或者'(1 1 2 2)\n 参数:value:要设置的值列表或者字符串/数字等"
},
"excel:sheets": {
"prefix" : "excel:sheets",
"body": [
"(excel:sheets ${1:xlapp})"
],
"description":"获取工作表列表\n 参数:XLApp:已打开的excel文件对象\n 返回值:工作表名列表"
},
"excel:unmerge-range": {
"prefix" : "excel:unmerge-range",
"body": [
"(excel:unmerge-range ${1:xlapp} ${2:index})"
],
"description":"分解合并单元格\n 参数:xlapp:已打开的excel文件对象\n 参数:index:区域索引，A1引用格式或者行列表\n 返回值:分解后的range对象"
},
"excel:utils-getvalue": {
"prefix" : "excel:utils-getvalue",
"body": [
"(excel:utils-getvalue ${1:var})"
],
"description":"说明:工具函数，获取变体的值\n 参数:var:变体\n 返回值:值列表，其中数字全部转换为字符串"
},
"excel:utils-index-offset": {
"prefix" : "excel:utils-index-offset",
"body": [
"(excel:utils-index-offset ${1:basecellid} ${2:rowoffset} ${3:columnoffset})"
],
"description":"根据行列偏移量计算单元格索引\n 参数:BaseCellId:基础单元格索引，可以为A1引用格式或者行列数字列表\n 参数:rowOffset:行偏移量\n 参数:columnOffset:列偏移量\n 返回值:A1格式的单元格索引"
},
"ext:anchor-hiddenfun": {
"prefix" : "ext:anchor-hiddenfun",
"body": [
"(ext:anchor-hiddenfun ${1:fun} ${2:prefix})"
],
"description":"显化AutoCAD 隐藏的函数, fun 隐藏函数名；prefix 显化函数的前缀。不支持2021+。"
},
"ext:interior": {
"prefix" : "ext:interior",
"body": [
"(ext:interior ${1:fun})"
],
"description":"显化内部符号或函数。\n 返回值:subr"
},
"ext:interior-fun": {
"prefix" : "ext:interior-fun",
"body": [
"(ext:interior-fun ${1:fun})"
],
"description":"调用内部函数。\n 返回值:subr"
},
"ext:probe-fun": {
"prefix" : "ext:probe-fun",
"body": [
"(ext:probe-fun ${1:fun})"
],
"description":"探测函数的参数个数(最小)及参数类型。\n 返回值:expr or nil"
},
"file:list-to-stream": {
"prefix" : "file:list-to-stream",
"body": [
"(file:list-to-stream ${1:out_file} ${2:intlist})"
],
"description":""
},
"file:merge": {
"prefix" : "file:merge",
"body": [
"(file:merge ${1:dist} ${2:lst-files})"
],
"description":"合并多个文件内容到 dist 文件中。"
},
"file:parse-ini": {
"prefix" : "file:parse-ini",
"body": [
"(file:parse-ini ${1:filename})"
],
"description":"解析 ini 文件。\n 返回值:list"
},
"file:read-stream": {
"prefix" : "file:read-stream",
"body": [
"(file:read-stream ${1:filename} ${2:encoding})"
],
"description":"读入指定编码的文件内容\n 返回值:String"
},
"file:subst-all": {
"prefix" : "file:subst-all",
"body": [
"(file:subst-all ${1:newstr} ${2:oldstr} ${3:lspfile} ${4:new-suffix})"
],
"description":"替换文件中的字符串。"
},
"filename:replace-special": {
"prefix" : "filename:replace-special",
"body": [
"(filename:replace-special ${1:str})"
],
"description":"替换文件名中的特殊字符。本函数只适用于单个文件，不适用于带目录的文件名字符串。\n 返回值:String"
},
"filename:special-symbol": {
"prefix" : "filename:special-symbol",
"body": [
"(filename:special-symbol ${1:str})"
],
"description":"替换文件名中的特殊字符，本函数只适用于单个文件，不适用于带目录的文件名字符串。\n 返回值:String"
},
"geometry:angle": {
"prefix" : "geometry:angle",
"body": [
"(geometry:angle ${1:segment})"
],
"description":"直线(线段)与坐标轴xyz的夹角列表\n 返回值:两点直线与x y z 轴的夹角(弧度)"
},
"geometry:box-intersectp": {
"prefix" : "geometry:box-intersectp",
"body": [
"(geometry:box-intersectp ${1:box1} ${2:box2})"
],
"description":"测试两个盒子是否交叉\n 返回值:T 交叉，nil 不交叉"
},
"geometry:convexhull-by-graham-scan": {
"prefix" : "geometry:convexhull-by-graham-scan",
"body": [
"(geometry:convexhull-by-graham-scan ${1:pts})"
],
"description":"graham-scan算法计算点集凸包\n 参数: pts:点表\n 返回值:凸包点表"
},
"geometry:convexhull-by-jarvis": {
"prefix" : "geometry:convexhull-by-jarvis",
"body": [
"(geometry:convexhull-by-jarvis ${1:pts})"
],
"description":"最小凸包算法: jarvis 步进法，package wrapping or gift wrapping"
},
"geometry:dist-pt-line": {
"prefix" : "geometry:dist-pt-line",
"body": [
"(geometry:dist-pt-line ${1:pt} ${2:segment})"
],
"description":"求点到线段的距离\n 返回值:number"
},
"geometry:merge-box": {
"prefix" : "geometry:merge-box",
"body": [
"(geometry:merge-box ${1:box1} ${2:box2})"
],
"description":"合并两个包围盒，不管两个盒子是否有重叠。\n 返回值:总包围盒"
},
"geometry:on-segment": {
"prefix" : "geometry:on-segment",
"body": [
"(geometry:on-segment ${1:pt} ${2:segment})"
],
"description":"判断一个与线段共线的点是否在线段上。"
},
"geometry:segment-by-line": {
"prefix" : "geometry:segment-by-line",
"body": [
"(geometry:segment-by-line ${1:line})"
],
"description":""
},
"geometry:segment-mid": {
"prefix" : "geometry:segment-mid",
"body": [
"(geometry:segment-mid ${1:segment})"
],
"description":"求线段的中点坐标\n 返回值:三维坐标值"
},
"geometry:turn-left-p": {
"prefix" : "geometry:turn-left-p",
"body": [
"(geometry:turn-left-p ${1:pt1} ${2:pt2} ${3:pt3})"
],
"description":"测试三点的转角方向为逆时针。\n 返回值:顺时针方向的夹角为正值，反之为负, 0为直线。"
},
"geometry:turn-right-p": {
"prefix" : "geometry:turn-right-p",
"body": [
"(geometry:turn-right-p ${1:pt1} ${2:pt2} ${3:pt3})"
],
"description":"判断三点的转角方向。\n 返回值:顺时针方向的夹角为正值，反之为负, 0为直线。"
},
"geometry:ucs": {
"prefix" : "geometry:ucs",
"body": [
"(geometry:ucs ${1:base} ${2:angle1})"
],
"description":""
},
"geometry:ucs-angle": {
"prefix" : "geometry:ucs-angle",
"body": [
"(geometry:ucs-angle)"
],
"description":""
},
"geometry:wcs2ucs": {
"prefix" : "geometry:wcs2ucs",
"body": [
"(geometry:wcs2ucs ${1:pt})"
],
"description":""
},
"group:get-by-name": {
"prefix" : "group:get-by-name",
"body": [
"(group:get-by-name ${1:name})"
],
"description":"获取编组名为 name 的编组对象。"
},
"group:groups-to-objlist": {
"prefix" : "group:groups-to-objlist",
"body": [
"(group:groups-to-objlist)"
],
"description":"将编组集转为编组对象列表."
},
"group:list": {
"prefix" : "group:list",
"body": [
"(group:list)"
],
"description":"列出图中的编组名"
},
"group:make": {
"prefix" : "group:make",
"body": [
"(group:make ${1:lst} ${2:name})"
],
"description":"实体集编组\n lst 图元列表，name 编组名,(匿名组首字为*)."
},
"group:to-entlist": {
"prefix" : "group:to-entlist",
"body": [
"(group:to-entlist ${1:obj-g})"
],
"description":"编组转图元列表, obj-g 为编组对象。"
},
"group:to-objlist": {
"prefix" : "group:to-objlist",
"body": [
"(group:to-objlist ${1:obj-g})"
],
"description":"编组转图元对象列表, obj-g 为编组对象。"
},
"hdinfo:get-cpuid": {
"prefix" : "hdinfo:get-cpuid",
"body": [
"(hdinfo:get-cpuid)"
],
"description":"获取CPU ID,不一定有用。"
},
"hdinfo:get-hd-serial": {
"prefix" : "hdinfo:get-hd-serial",
"body": [
"(hdinfo:get-hd-serial)"
],
"description":"获取硬盘序列号"
},
"hdinfo:get-mac": {
"prefix" : "hdinfo:get-mac",
"body": [
"(hdinfo:get-mac)"
],
"description":"获取mac地址，不一定有用。"
},
"ini:get": {
"prefix" : "ini:get",
"body": [
"(ini:get ${1:lst-ini} ${2:node} ${3:attr})"
],
"description":"取 ini 的某项的值。lst-ini ini文件的解析结果表, node 节 ，attr 属性项\n 返回值:String"
},
"ini:parse": {
"prefix" : "ini:parse",
"body": [
"(ini:parse ${1:filename})"
],
"description":"解析ini文件。\n 返回值:list"
},
"ini:read": {
"prefix" : "ini:read",
"body": [
"(ini:read)"
],
"description":""
},
"ini:save": {
"prefix" : "ini:save",
"body": [
"(ini:save ${1:lst-ini} ${2:filename})"
],
"description":"保存 lst-ini 表 到 ini 文件。\n 返回值:T or nil"
},
"ini:set": {
"prefix" : "ini:set",
"body": [
"(ini:set ${1:lst-ini} ${2:node} ${3:attr} ${4:value})"
],
"description":"设置 ini 的某项的值。lst-ini ini文件的解析结果表, node 节 ，attr 属性项, value 值。\n 返回值:lst-ini"
},
"json:encode-from-alist": {
"prefix" : "json:encode-from-alist",
"body": [
"(json:encode-from-alist ${1:lst})"
],
"description":"将关联列表转化为json串,测试版\n 返回值:list"
},
"json:parse": {
"prefix" : "json:parse",
"body": [
"(json:parse ${1:str})"
],
"description":"Json 字符串转化为 lisp 列表。\n 返回值:list"
},
"layer:activelayer": {
"prefix" : "layer:activelayer",
"body": [
"(layer:activelayer ${1:name})"
],
"description":"设置指定层为当前层\n 返回值:成功返回t，失败返回nil"
},
"layer:allname": {
"prefix" : "layer:allname",
"body": [
"(layer:allname)"
],
"description":"返回所有图层的名称(字符串表)"
},
"layer:ent": {
"prefix" : "layer:ent",
"body": [
"(layer:ent ${1:name})"
],
"description":"获获取指定图层的图元名\n 返回值:图元"
},
"layer:freeze": {
"prefix" : "layer:freeze",
"body": [
"(layer:freeze ${1:laylist} ${2:bool-flag})"
],
"description":"图层列表冻结开关函数"
},
"layer:freezed-p": {
"prefix" : "layer:freezed-p",
"body": [
"(layer:freezed-p ${1:lname})"
],
"description":"层是否冻结？"
},
"layer:freezelist": {
"prefix" : "layer:freezelist",
"body": [
"(layer:freezelist)"
],
"description":"返回冻结图层列表"
},
"layer:info": {
"prefix" : "layer:info",
"body": [
"(layer:info)"
],
"description":"返回所有图层的信息\n 返回值:((\"层名\"\n             状态 颜色 \"线型\")……)\n 状态：1冻结图层 2新视口冻结图层 4锁定…(其他看帮助)\n 颜色：负值为隐藏图层\n "
},
"layer:layerofflist": {
"prefix" : "layer:layerofflist",
"body": [
"(layer:layerofflist)"
],
"description":"返回关闭图层列表"
},
"layer:layers": {
"prefix" : "layer:layers",
"body": [
"(layer:layers)"
],
"description":"返回图层列表list"
},
"layer:list": {
"prefix" : "layer:list",
"body": [
"(layer:list)"
],
"description":"返回图层列表"
},
"layer:lock": {
"prefix" : "layer:lock",
"body": [
"(layer:lock ${1:laylist} ${2:bool-flag})"
],
"description":"图层锁定开关函数"
},
"layer:locked-p": {
"prefix" : "layer:locked-p",
"body": [
"(layer:locked-p ${1:lname})"
],
"description":"层是否锁定？"
},
"layer:lockedlist": {
"prefix" : "layer:lockedlist",
"body": [
"(layer:lockedlist)"
],
"description":"返回锁定图层列表"
},
"layer:make": {
"prefix" : "layer:make",
"body": [
"(layer:make ${1:name} ${2:colour} ${3:linetype} ${4:flag})"
],
"description":"创建一个图层\n 参数1:name:图层名称\n 参数2:colour:颜色默认nil(7)\n 参数3:linetype:线型默认nil(continuous)\n 参数4:n70:标志位，默认nil(0)\n   标准标记（按位编码值）：\n   1 = 冻结图层，否则解冻图层\n   2 = 默认情况下在新视口中冻结图层\n   4 = 锁定图层\n   16 = 如果设置了此位，则表条目外部依赖于外部参照\n   32 = 如果同时设置了此位和位 16，则表明已成功融入了外部依赖的外部参照\n   64 = 如果设置了此位，则表明在上次编辑图形时，图形中至少有一个图元参照了表条目。\n   (此标志适用于 autocad 命令。大多数读取 dxf 文件的程序都可以忽略它，并且无需由写入 dxf 文件的程序对其进行设置)"
},
"layer:obj-name": {
"prefix" : "layer:obj-name",
"body": [
"(layer:obj-name)"
],
"description":"返回所有图层对应的对象名(大写)\n 返回值:((图层名1 对象名1)\n         (图层名2 对象名2)……)"
},
"layer:off": {
"prefix" : "layer:off",
"body": [
"(layer:off ${1:laylist})"
],
"description":"关闭图层\n 参数：图层名称表"
},
"layer:on": {
"prefix" : "layer:on",
"body": [
"(layer:on ${1:laylist} ${2:bool-flag})"
],
"description":"图层列表开关函数"
},
"layer:plotable": {
"prefix" : "layer:plotable",
"body": [
"(layer:plotable ${1:laylist} ${2:on-off})"
],
"description":"设置指定图层(列表)不打印\n 参数1、图层列表\n 参数2、是否打印(t打印/nil不打印)"
},
"layer:plottable": {
"prefix" : "layer:plottable",
"body": [
"(layer:plottable ${1:laylist} ${2:bool-flag})"
],
"description":"图层打印开关函数"
},
"layer:plottablelist": {
"prefix" : "layer:plottablelist",
"body": [
"(layer:plottablelist)"
],
"description":"返回可打印图层列表"
},
"layer:readme": {
"prefix" : "layer:readme",
"body": [
"(layer:readme)"
],
"description":"图层操作相关函数。"
},
"layout:list": {
"prefix" : "layout:list",
"body": [
"(layout:list)"
],
"description":"按照当前屏幕显示的顺序返回所有布局名称\n 返回值:布局名列表"
},
"layout:make-viewport": {
"prefix" : "layout:make-viewport",
"body": [
"(layout:make-viewport ${1:layout} ${2:pt-center} ${3:width} ${4:height} ${5:pt-model} ${6:pt2})"
],
"description":"从模型空间生成布局"
},
"layout:readme": {
"prefix" : "layout:readme",
"body": [
"(layout:readme)"
],
"description":"布局操作相关函数。"
},
"layout:rename": {
"prefix" : "layout:rename",
"body": [
"(layout:rename ${1:str-oldname} ${2:str-newname})"
],
"description":"重命名布局名称"
},
"layout:set-position": {
"prefix" : "layout:set-position",
"body": [
"(layout:set-position ${1:name} ${2:n})"
],
"description":"根据指定布局名称修改布局的位置"
},
"layout:sort": {
"prefix" : "layout:sort",
"body": [
"(layout:sort)"
],
"description":"自动按布局名排序布局"
},
"layout:vla-list": {
"prefix" : "layout:vla-list",
"body": [
"(layout:vla-list)"
],
"description":"按照当前屏幕显示的顺序返回所有布局对象\n 返回值:布局对象列表"
},
"line:get-lwpoints": {
"prefix" : "line:get-lwpoints",
"body": [
"(line:get-lwpoints ${1:en0})"
],
"description":"生成多段线的点序"
},
"line:length": {
"prefix" : "line:length",
"body": [
"(line:length ${1:ent-line})"
],
"description":"求线段实体长度"
},
"line:mid": {
"prefix" : "line:mid",
"body": [
"(line:mid ${1:ent-line})"
],
"description":"求线段实体中点坐标"
},
"list:+": {
"prefix" : "list:+",
"body": [
"(list:+ ${1:lst1} ${2:lst2})"
],
"description":"两个列表各项相加之和组成的列表，列表长度以参数中列表长度小的为准.\n 参数:lst1,lst2:数字列表\n 返回值:列表各项相加后的列表"
},
"list:-": {
"prefix" : "list:-",
"body": [
"(list:- ${1:lst1} ${2:lst2})"
],
"description":"两个列表各项差组成的列表，列表长度以参数中列表长度小的为准"
},
"list:add": {
"prefix" : "list:add",
"body": [
"(list:add)"
],
"description":""
},
"list:assoclist-additem": {
"prefix" : "list:assoclist-additem",
"body": [
"(list:assoclist-additem ${1:lst} ${2:value})"
],
"description":"添加关联表的元素.无替换\n 返回值:关联表，无相同的key"
},
"list:assoclist-appenditem": {
"prefix" : "list:assoclist-appenditem",
"body": [
"(list:assoclist-appenditem ${1:lst} ${2:value})"
],
"description":"添加或替换关联表的元素\n  同 assoc"
},
"list:assoclist-appendlist": {
"prefix" : "list:assoclist-appendlist",
"body": [
"(list:assoclist-appendlist ${1:lst} ${2:value})"
],
"description":""
},
"list:assoclist-index": {
"prefix" : "list:assoclist-index",
"body": [
"(list:assoclist-index ${1:lst} ${2:key})"
],
"description":"根据key查找关联表的索引\n 返回值:索引，从0开始"
},
"list:assoclist-key": {
"prefix" : "list:assoclist-key",
"body": [
"(list:assoclist-key ${1:lst} ${2:key})"
],
"description":"返回关联表中key对应的value。等价于(cdr (assoc key value))\n 返回值:key对应的value"
},
"list:assoclist-keys": {
"prefix" : "list:assoclist-keys",
"body": [
"(list:assoclist-keys ${1:lst})"
],
"description":"返回关联表的key值表"
},
"list:assoclist-remove": {
"prefix" : "list:assoclist-remove",
"body": [
"(list:assoclist-remove ${1:lst} ${2:key})"
],
"description":"删除表中关联表匹配到key的的子表\n 返回值:删除元素后的表"
},
"list:assoclist-values": {
"prefix" : "list:assoclist-values",
"body": [
"(list:assoclist-values ${1:lst})"
],
"description":"返回关联表的value值表"
},
"list:change-index": {
"prefix" : "list:change-index",
"body": [
"(list:change-index ${1:lst} ${2:m} ${3:n})"
],
"description":"交换列表的m和n项，索引从0开始"
},
"list:delnotsame": {
"prefix" : "list:delnotsame",
"body": [
"(list:delnotsame ${1:lst})"
],
"description":"查找表中不重复元素。"
},
"list:delsame": {
"prefix" : "list:delsame",
"body": [
"(list:delsame ${1:lst} ${2:buzz})"
],
"description":"删除表中相同元素，保留第一次出现的位置"
},
"list:delsame-all": {
"prefix" : "list:delsame-all",
"body": [
"(list:delsame-all ${1:lst})"
],
"description":"删除表中所有重复的元素"
},
"list:difference": {
"prefix" : "list:difference",
"body": [
"(list:difference ${1:lst1} ${2:lst2})"
],
"description":"求差集.\n 返回值:list"
},
"list:exist": {
"prefix" : "list:exist",
"body": [
"(list:exist ${1:lst} ${2:item})"
],
"description":"判断item是否在列表内\n 返回值:存在t，反之nil"
},
"list:flatten": {
"prefix" : "list:flatten",
"body": [
"(list:flatten ${1:lst})"
],
"description":"将多维列表展平为一维。单向箔。\n 返回值:list"
},
"list:get-front-nth": {
"prefix" : "list:get-front-nth",
"body": [
"(list:get-front-nth ${1:n} ${2:lst})"
],
"description":"返回前 n 个元素"
},
"list:get-ubound": {
"prefix" : "list:get-ubound",
"body": [
"(list:get-ubound ${1:lst})"
],
"description":"得到表的各维数长度，最多支持到三维"
},
"list:insert": {
"prefix" : "list:insert",
"body": [
"(list:insert ${1:lst} ${2:index} ${3:item})"
],
"description":"在列表lst 的第 index 项前插入项 item。\n 返回值:插入项后的列表"
},
"list:insert-nth": {
"prefix" : "list:insert-nth",
"body": [
"(list:insert-nth ${1:value} ${2:n} ${3:lst})"
],
"description":"插入元素va到lst表的第n位"
},
"list:intersect": {
"prefix" : "list:intersect",
"body": [
"(list:intersect ${1:lst1} ${2:lst2})"
],
"description":"求两个列表集合的交集\n 返回值:List"
},
"list:intersection": {
"prefix" : "list:intersection",
"body": [
"(list:intersection)"
],
"description":""
},
"list:item-num": {
"prefix" : "list:item-num",
"body": [
"(list:item-num ${1:lst})"
],
"description":"表中元素及数量"
},
"list:ltrim": {
"prefix" : "list:ltrim",
"body": [
"(list:ltrim ${1:lst} ${2:m})"
],
"description":"删除表头前m项"
},
"list:move": {
"prefix" : "list:move",
"body": [
"(list:move ${1:lst} ${2:n})"
],
"description":"列表循环移动"
},
"list:positions": {
"prefix" : "list:positions",
"body": [
"(list:positions ${1:item} ${2:lst})"
],
"description":"获取元素 item 在 表 lst 中的所有位置。\n 返回值:list"
},
"list:range": {
"prefix" : "list:range",
"body": [
"(list:range ${1:start} ${2:end} ${3:step})"
],
"description":"生成等差数列表，类似python的range()函数.\n 参数：start:起始值\n       end:结束值\n       step:等差值\n 返回值:等差数列表"
},
"list:remove-duplicates": {
"prefix" : "list:remove-duplicates",
"body": [
"(list:remove-duplicates ${1:lst})"
],
"description":"删除列表中重复的原子。"
},
"list:remove-front-nth": {
"prefix" : "list:remove-front-nth",
"body": [
"(list:remove-front-nth ${1:n} ${2:lst})"
],
"description":"删除列表中表的前n个元素"
},
"list:remove-index": {
"prefix" : "list:remove-index",
"body": [
"(list:remove-index ${1:lst} ${2:index})"
],
"description":"按索引删除列表的项,leemac\n 返回值:删除索引项之后的列表"
},
"list:remove-nth": {
"prefix" : "list:remove-nth",
"body": [
"(list:remove-nth ${1:n} ${2:lst})"
],
"description":"删除lst表的第n个元素"
},
"list:remove-once": {
"prefix" : "list:remove-once",
"body": [
"(list:remove-once ${1:lst} ${2:item})"
],
"description":"删除表中第一个匹配到的元素\n 返回值:删除元素后的表"
},
"list:replace-index": {
"prefix" : "list:replace-index",
"body": [
"(list:replace-index ${1:oldlst} ${2:index} ${3:item})"
],
"description":"按索引替换列表\n 返回值:替换后的列表"
},
"list:replace[m,n]": {
"prefix" : "list:replace[m,n]",
"body": [
"(list:replace[m,n])"
],
"description":""
},
"list:rm-m2n": {
"prefix" : "list:rm-m2n",
"body": [
"(list:rm-m2n ${1:lst} ${2:m} ${3:n})"
],
"description":"删除列表的第m至n项，索引值从0计算"
},
"list:rtrim": {
"prefix" : "list:rtrim",
"body": [
"(list:rtrim ${1:lst} ${2:m})"
],
"description":"删除表尾m项"
},
"list:same": {
"prefix" : "list:same",
"body": [
"(list:same ${1:lst})"
],
"description":"查找表中重复元素"
},
"list:same-num": {
"prefix" : "list:same-num",
"body": [
"(list:same-num ${1:lst})"
],
"description":"表中相同元素及数量"
},
"list:search-index": {
"prefix" : "list:search-index",
"body": [
"(list:search-index ${1:lst} ${2:index})"
],
"description":"以索引查找表中元素\n 参数：\n   lst:列表\n   index:索引或者索引表\n 返回值:查找到的元素组成的表"
},
"list:search-item": {
"prefix" : "list:search-item",
"body": [
"(list:search-item ${1:lst} ${2:item})"
],
"description":"查找表中元素的索引，索引从0开始\n 返回值:索引值表"
},
"list:set-nth": {
"prefix" : "list:set-nth",
"body": [
"(list:set-nth ${1:value} ${2:n} ${3:lst})"
],
"description":"更新lst表的第n个元素为value"
},
"list:split": {
"prefix" : "list:split",
"body": [
"(list:split ${1:lst} ${2:x})"
],
"description":"列表切分,不足部分省略，此函数返回结果相对list:split-2d、list:split-3d两个特殊函数比较合理"
},
"list:split-2d": {
"prefix" : "list:split-2d",
"body": [
"(list:split-2d ${1:lst})"
],
"description":"列表按顺序切分为2元素表组成的表\n 不足部分用nil表示"
},
"list:split-3d": {
"prefix" : "list:split-3d",
"body": [
"(list:split-3d ${1:lst})"
],
"description":"列表按顺序切分为3元素表组成的表\n 不足部分用nil表示\n 返回值:((x x x )(x x x)...)"
},
"list:split-index": {
"prefix" : "list:split-index",
"body": [
"(list:split-index ${1:lst} ${2:index})"
],
"description":"根据索引分割列表，索引从0开始\n 返回值:索引前后元素组成的表，其中索引所指向的元素位于第二个子表的表头"
},
"list:sublist": {
"prefix" : "list:sublist",
"body": [
"(list:sublist ${1:lst} ${2:idx} ${3:len})"
],
"description":"获取子列表\n  from leemac\n 返回值:子列表"
},
"list:subst": {
"prefix" : "list:subst",
"body": [
"(list:subst ${1:n} ${2:a} ${3:l})"
],
"description":"置换表中指定位置的元素"
},
"list:trim": {
"prefix" : "list:trim",
"body": [
"(list:trim ${1:lst} ${2:m} ${3:n})"
],
"description":"删除表头前m项，表尾前n项"
},
"list:union": {
"prefix" : "list:union",
"body": [
"(list:union ${1:lst1} ${2:lst2})"
],
"description":"求两个集合的并集\n 返回值:list"
},
"m:acos": {
"prefix" : "m:acos",
"body": [
"(m:acos ${1:x})"
],
"description":"arccos,arcos,计算反余弦值"
},
"m:arcosh": {
"prefix" : "m:arcosh",
"body": [
"(m:arcosh ${1:x})"
],
"description":"arccosh,aconsh,计算反双曲余弦值"
},
"m:arsinh": {
"prefix" : "m:arsinh",
"body": [
"(m:arsinh ${1:x})"
],
"description":"arcsinh,asinh,计算反双曲正弦值"
},
"m:artanh": {
"prefix" : "m:artanh",
"body": [
"(m:artanh ${1:x})"
],
"description":"计算反双曲正切值"
},
"m:asin": {
"prefix" : "m:asin",
"body": [
"(m:asin ${1:x})"
],
"description":"arcsin,arsin,计算反正弦值"
},
"m:azimuth": {
"prefix" : "m:azimuth",
"body": [
"(m:azimuth ${1:ang})"
],
"description":"计算某个角度(以x轴正向，逆时针)的方位角(以y轴正向，顺时针)"
},
"m:base2dec": {
"prefix" : "m:base2dec",
"body": [
"(m:base2dec ${1:strnum} ${2:int-b})"
],
"description":"进制转换,strnum 字符串表示的数, int-b 进制(2-36)\n 返回值:fixnum"
},
"m:cal": {
"prefix" : "m:cal",
"body": [
"(m:cal ${1:lst1} ${2:lst2} ${3:str})"
],
"description":"根据给定表达式计算结果"
},
"m:calheight": {
"prefix" : "m:calheight",
"body": [
"(m:calheight ${1:pt1} ${2:pt2} ${3:podu})"
],
"description":"目标点的高程"
},
"m:coord-chg": {
"prefix" : "m:coord-chg",
"body": [
"(m:coord-chg ${1:pt-wcs} ${2:o-ucs} ${3:o-ang})"
],
"description":""
},
"m:coordinate": {
"prefix" : "m:coordinate",
"body": [
"(m:coordinate ${1:p-base} ${2:point2d})"
],
"description":"坐标向量变换"
},
"m:coordinate-rotate": {
"prefix" : "m:coordinate-rotate",
"body": [
"(m:coordinate-rotate ${1:point2d} ${2:angle1})"
],
"description":"坐标旋转"
},
"m:coordinate-scale": {
"prefix" : "m:coordinate-scale",
"body": [
"(m:coordinate-scale ${1:point} ${2:scale})"
],
"description":"坐标缩放"
},
"m:cosh": {
"prefix" : "m:cosh",
"body": [
"(m:cosh ${1:x})"
],
"description":"计算双曲余弦值"
},
"m:dec2base": {
"prefix" : "m:dec2base",
"body": [
"(m:dec2base ${1:fixnum} ${2:int-b})"
],
"description":"10进制转换为指定进制\n  fixnum 整数值, int-b 进制(2-36)\n 返回值:string"
},
"m:dec2hex": {
"prefix" : "m:dec2hex",
"body": [
"(m:dec2hex ${1:fixnum})"
],
"description":"将十进制整数转换为16进制符号 0XAB的形式\n 返回值:symbol"
},
"m:difference": {
"prefix" : "m:difference",
"body": [
"(m:difference ${1:lst1} ${2:lst2})"
],
"description":"列表差集"
},
"m:dmm": {
"prefix" : "m:dmm",
"body": [
"(m:dmm ${1:ang})"
],
"description":"根据给定弧度返回度分秒格式的表"
},
"m:dms": {
"prefix" : "m:dms",
"body": [
"(m:dms ${1:degress})"
],
"description":"根据给定十进制角度返回度分秒格式的表"
},
"m:evenp": {
"prefix" : "m:evenp",
"body": [
"(m:evenp ${1:n})"
],
"description":"测试一个整数是否为偶数\n 返回值:T or nil"
},
"m:expmod": {
"prefix" : "m:expmod",
"body": [
"(m:expmod ${1:base} ${2:exp1} ${3:m})"
],
"description":""
},
"m:factorial": {
"prefix" : "m:factorial",
"body": [
"(m:factorial ${1:n})"
],
"description":"求n 的阶乘。斯特林公式法。\n "
},
"m:fast-expt": {
"prefix" : "m:fast-expt",
"body": [
"(m:fast-expt ${1:b} ${2:n})"
],
"description":""
},
"m:fermat-test": {
"prefix" : "m:fermat-test",
"body": [
"(m:fermat-test ${1:n})"
],
"description":"素数测试\n 返回值:T or nil"
},
"m:fix-angle": {
"prefix" : "m:fix-angle",
"body": [
"(m:fix-angle ${1:angle0})"
],
"description":"使弧度值在 0-2pi 之间。"
},
"m:gcd": {
"prefix" : "m:gcd",
"body": [
"(m:gcd ${1:a} ${2:b})"
],
"description":"求最大公约数"
},
"m:hex2dec": {
"prefix" : "m:hex2dec",
"body": [
"(m:hex2dec ${1:hex})"
],
"description":"16进制转换为10进制整数,hex 为 0x 开头的符号或字符串。\n 返回值:fixnum"
},
"m:intersect": {
"prefix" : "m:intersect",
"body": [
"(m:intersect ${1:lst1} ${2:lst2})"
],
"description":"列表交集"
},
"m:length": {
"prefix" : "m:length",
"body": [
"(m:length ${1:start} ${2:end})"
],
"description":"两点长度(距离)，等同于两点向量的模"
},
"m:linear-interpolation": {
"prefix" : "m:linear-interpolation",
"body": [
"(m:linear-interpolation ${1:x} ${2:x1} ${3:x2} ${4:y1} ${5:y2})"
],
"description":"线性插值 y=y1+(y2-y1)*(x-x1)/(x2-x1)\n 返回值:number"
},
"m:maxlist": {
"prefix" : "m:maxlist",
"body": [
"(m:maxlist ${1:lst})"
],
"description":"返回数值列表的中的最大值"
},
"m:mid": {
"prefix" : "m:mid",
"body": [
"(m:mid ${1:x} ${2:y})"
],
"description":"计算中点"
},
"m:minlist": {
"prefix" : "m:minlist",
"body": [
"(m:minlist ${1:lst})"
],
"description":"返回数值列表的中的最小值"
},
"m:mulmod": {
"prefix" : "m:mulmod",
"body": [
"(m:mulmod ${1:a} ${2:b} ${3:m})"
],
"description":"快速积求模"
},
"m:power": {
"prefix" : "m:power",
"body": [
"(m:power ${1:base} ${2:pow})"
],
"description":"增强power函数，目的为扩展expt函数,参数都为数字时，字符串，数字，列表类型，其他类型返回nil,返回expt计算的结果，base为字符串和列表时，返回自乘的结果"
},
"m:rand": {
"prefix" : "m:rand",
"body": [
"(m:rand)"
],
"description":"生成伪随机数\n 返回值:0~1之间的实数"
},
"m:rand-by-cputicks": {
"prefix" : "m:rand-by-cputicks",
"body": [
"(m:rand-by-cputicks)"
],
"description":"以日期及CPUticks为参数生成随机数\n 返回值:1~100之间的整数"
},
"m:random": {
"prefix" : "m:random",
"body": [
"(m:random ${1:n})"
],
"description":"依日期变量生成伪随机数"
},
"m:random-fix": {
"prefix" : "m:random-fix",
"body": [
"(m:random-fix ${1:n} ${2:m})"
],
"description":""
},
"m:randrange": {
"prefix" : "m:randrange",
"body": [
"(m:randrange ${1:a} ${2:b})"
],
"description":"计算给定范围内的随机数"
},
"m:rtos": {
"prefix" : "m:rtos",
"body": [
"(m:rtos ${1:real} ${2:prec})"
],
"description":"保留小数位数(四舍五入)\n 返回值:四舍五入后的字符串"
},
"m:sign": {
"prefix" : "m:sign",
"body": [
"(m:sign ${1:x})"
],
"description":"实数的符号(正负号)\n 返回值:t 为正，nil 为负"
},
"m:sinh": {
"prefix" : "m:sinh",
"body": [
"(m:sinh ${1:x})"
],
"description":"计算双曲正弦值"
},
"m:sort-by-curve": {
"prefix" : "m:sort-by-curve",
"body": [
"(m:sort-by-curve ${1:curve} ${2:lst})"
],
"description":"函数说明:沿曲线排序~%返 回 值:排序后的点表"
},
"m:square": {
"prefix" : "m:square",
"body": [
"(m:square ${1:x})"
],
"description":""
},
"m:symmetric-difference": {
"prefix" : "m:symmetric-difference",
"body": [
"(m:symmetric-difference ${1:l1} ${2:l2})"
],
"description":"列表对称差集"
},
"m:tan": {
"prefix" : "m:tan",
"body": [
"(m:tan ${1:num})"
],
"description":"计算正切值\n 返回值:实数"
},
"m:tanh": {
"prefix" : "m:tanh",
"body": [
"(m:tanh ${1:x})"
],
"description":"计算双曲正切值"
},
"m:transpt": {
"prefix" : "m:transpt",
"body": [
"(m:transpt ${1:base} ${2:usrpt} ${3:transpt} ${4:ang})"
],
"description":"根据已知世界坐标和用户坐标的基准点，计算世界坐标对应的用户坐标"
},
"m:trim": {
"prefix" : "m:trim",
"body": [
"(m:trim ${1:realnum})"
],
"description":"数值后续零清除"
},
"m:union": {
"prefix" : "m:union",
"body": [
"(m:union ${1:lst1} ${2:lst2})"
],
"description":"求列表的并集"
},
"matrix:mxm": {
"prefix" : "matrix:mxm",
"body": [
"(matrix:mxm ${1:m} ${2:q})"
],
"description":"矩阵相乘"
},
"matrix:mxp": {
"prefix" : "matrix:mxp",
"body": [
"(matrix:mxp ${1:m} ${2:p})"
],
"description":"点到矩阵的变换"
},
"matrix:mxv": {
"prefix" : "matrix:mxv",
"body": [
"(matrix:mxv ${1:m} ${2:v})"
],
"description":"向量的矩阵变换(向量乘矩阵)\n     "
},
"matrix:norm": {
"prefix" : "matrix:norm",
"body": [
"(matrix:norm ${1:v})"
],
"description":"向量的模(长度)"
},
"matrix:trp": {
"prefix" : "matrix:trp",
"body": [
"(matrix:trp ${1:m})"
],
"description":"矩阵转置"
},
"matrix:unit": {
"prefix" : "matrix:unit",
"body": [
"(matrix:unit ${1:v})"
],
"description":"单位向量"
},
"matrix:v^v": {
"prefix" : "matrix:v^v",
"body": [
"(matrix:v^v ${1:u} ${2:v})"
],
"description":"两向量的叉积"
},
"matrix:vxs": {
"prefix" : "matrix:vxs",
"body": [
"(matrix:vxs ${1:v} ${2:s})"
],
"description":"向量乘标量(系数)"
},
"matrix:vxv": {
"prefix" : "matrix:vxv",
"body": [
"(matrix:vxv ${1:v1} ${2:v2})"
],
"description":"向量的点积"
},
"music-die:list-to-var": {
"prefix" : "music-die:list-to-var",
"body": [
"(music-die:list-to-var ${1:lists})"
],
"description":""
},
"music-die:multi-element": {
"prefix" : "music-die:multi-element",
"body": [
"(music-die:multi-element ${1:element} ${2:num})"
],
"description":"\n 使某个lisp元素出现以列表形式存储多份\n ELEMENT 元素  num 存储份数\n 作者：MUSIC-DIE\n \n 返回值:\n 返回值：（list element elemen element element ...）\n "
},
"music-die:undo1": {
"prefix" : "music-die:undo1",
"body": [
"(music-die:undo1)"
],
"description":"可撤回一步操作，并且不会使视口移动"
},
"p:consp": {
"prefix" : "p:consp",
"body": [
"(p:consp ${1:lst})"
],
"description":"判断是否为构造表，这里 nil 不是构造表\n 返回值:T or nil"
},
"p:curvep": {
"prefix" : "p:curvep",
"body": [
"(p:curvep ${1:obj})"
],
"description":"是否是曲线"
},
"p:dotpairp": {
"prefix" : "p:dotpairp",
"body": [
"(p:dotpairp ${1:lst})"
],
"description":"是否为点对表"
},
"p:ename-listp": {
"prefix" : "p:ename-listp",
"body": [
"(p:ename-listp ${1:lst})"
],
"description":"判断是否为图元名列表"
},
"p:enamep": {
"prefix" : "p:enamep",
"body": [
"(p:enamep ${1:arg})"
],
"description":"判断是否图元"
},
"p:intp": {
"prefix" : "p:intp",
"body": [
"(p:intp ${1:x})"
],
"description":"判断是否整数"
},
"p:listp": {
"prefix" : "p:listp",
"body": [
"(p:listp ${1:lst})"
],
"description":"判断是否为链表。注意'(a b . c)不是链表\n 返回值:T or nil"
},
"p:picksetp": {
"prefix" : "p:picksetp",
"body": [
"(p:picksetp ${1:ss})"
],
"description":"判断是否非空选择集"
},
"p:readme": {
"prefix" : "p:readme",
"body": [
"(p:readme)"
],
"description":"谓词函数及测试函数。"
},
"p:realp": {
"prefix" : "p:realp",
"body": [
"(p:realp ${1:arg})"
],
"description":"判断是否实数"
},
"p:safearrayp": {
"prefix" : "p:safearrayp",
"body": [
"(p:safearrayp ${1:x})"
],
"description":"判断是否为安全数组"
},
"p:string-listp": {
"prefix" : "p:string-listp",
"body": [
"(p:string-listp ${1:lst})"
],
"description":"判断是否为字符串列表"
},
"p:stringp": {
"prefix" : "p:stringp",
"body": [
"(p:stringp ${1:arg})"
],
"description":"判断是否字符串"
},
"p:variantp": {
"prefix" : "p:variantp",
"body": [
"(p:variantp ${1:arg})"
],
"description":"判断是否变体"
},
"p:vla-listp": {
"prefix" : "p:vla-listp",
"body": [
"(p:vla-listp ${1:lst})"
],
"description":"判断是否为vla对象列表"
},
"p:vlap": {
"prefix" : "p:vlap",
"body": [
"(p:vlap ${1:obj})"
],
"description":"判断是否vla对象."
},
"pickset:boxs": {
"prefix" : "pickset:boxs",
"body": [
"(pickset:boxs ${1:ss})"
],
"description":"求选择集内各图元的包围盒\n (角点:左下，右上)组成的列表,ss 选择集或图元列表\n 返回值:(box1 box2 box3)"
},
"pickset:cluster": {
"prefix" : "pickset:cluster",
"body": [
"(pickset:cluster ${1:ss} ${2:gap})"
],
"description":"对图元进行聚类分析，按片区求图元集的包围盒。\n 返回值:各图元群的包围盒(两点坐标), 组成的列表"
},
"pickset:delsameent": {
"prefix" : "pickset:delsameent",
"body": [
"(pickset:delsameent ${1:ss})"
],
"description":"删除重复图元\n 参数:\n ss:选择集\n 返回值:无"
},
"pickset:erase": {
"prefix" : "pickset:erase",
"body": [
"(pickset:erase ${1:ss})"
],
"description":"删除选择集图元\n 返回值:最后一个被删除的图元"
},
"pickset:from-entlist": {
"prefix" : "pickset:from-entlist",
"body": [
"(pickset:from-entlist ${1:entlst})"
],
"description":"图元列表->选择集\n 返回值:选择集"
},
"pickset:from-list": {
"prefix" : "pickset:from-list",
"body": [
"(pickset:from-list ${1:lstent})"
],
"description":"把图元列表转化成选择集，参数\n 返回值:选择集"
},
"pickset:get-sub": {
"prefix" : "pickset:get-sub",
"body": [
"(pickset:get-sub ${1:ss} ${2:filter})"
],
"description":"从选择集或图元表中按 filter 规则过滤. 当前版本不支持 XOR 和 逻辑嵌套。\n 返回值:过滤后的图元表"
},
"pickset:getbox": {
"prefix" : "pickset:getbox",
"body": [
"(pickset:getbox ${1:ss} ${2:offset})"
],
"description":"获取选择集的包围盒。\n 返回值:外框（偏移后）的左下，右上角点"
},
"pickset:join": {
"prefix" : "pickset:join",
"body": [
"(pickset:join ${1:ss1} ${2:ss2})"
],
"description":"将第一个选择集中的图元加入到第二个选择集中。\n 返回值:合并后的新选择集"
},
"pickset:pt-verts": {
"prefix" : "pickset:pt-verts",
"body": [
"(pickset:pt-verts ${1:ss})"
],
"description":"取点"
},
"pickset:ptx": {
"prefix" : "pickset:ptx",
"body": [
"(pickset:ptx ${1:sel} ${2:n})"
],
"description":"取选择集4角点坐标的第n个，左下 0 右下 1 右上 2 左上 3\n 返回值:第n个角点坐标"
},
"pickset:readme": {
"prefix" : "pickset:readme",
"body": [
"(pickset:readme)"
],
"description":"选择集相关函数。"
},
"pickset:sort": {
"prefix" : "pickset:sort",
"body": [
"(pickset:sort ${1:sspts} ${2:key} ${3:fuzz})"
],
"description":"通用选择集，点表，图元列表排序\n 参数:ssPts:选择集，点表，图元列表\n 参数:KEY:xyzXYZ 任意组合 ,例如\"yX\",y在前表示y坐标优先，小y表示从小到大(注:二维点时，不能有z)\n 参数:FUZZ:数值，允许偏差；\n 返回值:结果根据ssPts不同"
},
"pickset:sort-with-dxf": {
"prefix" : "pickset:sort-with-dxf",
"body": [
"(pickset:sort-with-dxf ${1:ss} ${2:dxf-i} ${3:n} ${4:fuzz} ${5:decreasep})"
],
"description":"选择集按照给定的组码值进行排序。<br />n:如果组码值为一个表，则 n 指出使用第几个；否则nil 。<br /> decreasep:T表示从大到小，nil表示从小到大 \n 返回值:排序后的选择集"
},
"pickset:ss-forword-en": {
"prefix" : "pickset:ss-forword-en",
"body": [
"(pickset:ss-forword-en ${1:en})"
],
"description":"将图元 ent 之后的所有图元形成的选择集\n 返回值:pickset"
},
"pickset:ssget": {
"prefix" : "pickset:ssget",
"body": [
"(pickset:ssget ${1:msg} ${2:params})"
],
"description":"自定义带提示符的ssget \n 返回值:选择集"
},
"pickset:ssget-crossline": {
"prefix" : "pickset:ssget-crossline",
"body": [
"(pickset:ssget-crossline ${1:ent} ${2:filter})"
],
"description":"取得与线相交的选择集\n 返回值:选择集"
},
"pickset:sub": {
"prefix" : "pickset:sub",
"body": [
"(pickset:sub ${1:ss1} ${2:ss2})"
],
"description":"选择集相减\n 返回值:选择集 or nil"
},
"pickset:to-array": {
"prefix" : "pickset:to-array",
"body": [
"(pickset:to-array ${1:ss})"
],
"description":"选择集->数\n 返回值:数组"
},
"pickset:to-entlist": {
"prefix" : "pickset:to-entlist",
"body": [
"(pickset:to-entlist ${1:ss})"
],
"description":"选择集->图元列表\n 返回值:图元列表"
},
"pickset:to-list": {
"prefix" : "pickset:to-list",
"body": [
"(pickset:to-list ${1:ss})"
],
"description":"选择集转图元列表\n 返回值:图元列表"
},
"pickset:to-list-by-ssname": {
"prefix" : "pickset:to-list-by-ssname",
"body": [
"(pickset:to-list-by-ssname ${1:ss})"
],
"description":"选择集转图元表，ssname 方法\n 返回值:lst"
},
"pickset:to-list-by-ssnamex": {
"prefix" : "pickset:to-list-by-ssnamex",
"body": [
"(pickset:to-list-by-ssnamex ${1:ss})"
],
"description":"选择集转图元表，ssnamex 方法\n 返回值:lst"
},
"pickset:to-vlalist": {
"prefix" : "pickset:to-vlalist",
"body": [
"(pickset:to-vlalist ${1:ss})"
],
"description":"选择集转为Vla列表\n 返回值:Vla列表"
},
"point:centroid": {
"prefix" : "point:centroid",
"body": [
"(point:centroid ${1:pts})"
],
"description":"求多个点的几何形心\n 返回值:POINT"
},
"point:div": {
"prefix" : "point:div",
"body": [
"(point:div ${1:pt1} ${2:pt2} ${3:n})"
],
"description":"将 pt1 pt2 之间等分 n 份后每个点的坐标(不含pt1 pt2)\n 返回值:点坐标表"
},
"point:in-box": {
"prefix" : "point:in-box",
"body": [
"(point:in-box ${1:pt1} ${2:pt-box1} ${3:pt-box2})"
],
"description":"判断 pt1 是否在矩形内\n 返回值:t or nil"
},
"point:mid": {
"prefix" : "point:mid",
"body": [
"(point:mid ${1:pt1} ${2:pt2})"
],
"description":"求两点 pt1 pt2 的中点\n 返回值:中点坐标"
},
"reg:list-app": {
"prefix" : "reg:list-app",
"body": [
"(reg:list-app)"
],
"description":"列出vlax-get-or-create-object可用的应用对象 \n 返回值:lst"
},
"stat:classify": {
"prefix" : "stat:classify",
"body": [
"(stat:classify ${1:lst-cons})"
],
"description":"分类统计由一系列类别和数字组成的点对表。按类别统计求类别后数值的总和。\n 返回值:lst"
},
"stat:draw": {
"prefix" : "stat:draw",
"body": [
"(stat:draw)"
],
"description":"绘制最后一次统计的结果"
},
"stat:mode": {
"prefix" : "stat:mode",
"body": [
"(stat:mode ${1:stat-res})"
],
"description":"众数"
},
"stat:print": {
"prefix" : "stat:print",
"body": [
"(stat:print)"
],
"description":"打印最后一次统计的结果"
},
"stat:stat": {
"prefix" : "stat:stat",
"body": [
"(stat:stat ${1:lst})"
],
"description":"统计列表 lst 中的元素个数。\n 返回值:元素和个数组成的点对表"
},
"std:acad-object": {
"prefix" : "std:acad-object",
"body": [
"(std:acad-object)"
],
"description":"返回cad对象"
},
"std:active-document": {
"prefix" : "std:active-document",
"body": [
"(std:active-document)"
],
"description":"返回当前活动文档对象"
},
"std:addmenu": {
"prefix" : "std:addmenu",
"body": [
"(std:addmenu ${1:menugroupname} ${2:popname} ${3:popitems} ${4:insertbeforeitem})"
],
"description":""
},
"std:addsupportpath": {
"prefix" : "std:addsupportpath",
"body": [
"(std:addsupportpath ${1:lst})"
],
"description":""
},
"std:addtoolbars": {
"prefix" : "std:addtoolbars",
"body": [
"(std:addtoolbars ${1:menugroupname} ${2:toolbaritems})"
],
"description":""
},
"std:catchapply": {
"prefix" : "std:catchapply",
"body": [
"(std:catchapply ${1:fun} ${2:args})"
],
"description":""
},
"std:endundo": {
"prefix" : "std:endundo",
"body": [
"(std:endundo ${1:doc})"
],
"description":""
},
"std:getinput": {
"prefix" : "std:getinput",
"body": [
"(std:getinput ${1:promptstr} ${2:inplist} ${3:default})"
],
"description":"获取输入，结合initget和getkword函数"
},
"std:insertpopmenuitems": {
"prefix" : "std:insertpopmenuitems",
"body": [
"(std:insertpopmenuitems ${1:popupmenu} ${2:popitems})"
],
"description":""
},
"std:layers": {
"prefix" : "std:layers",
"body": [
"(std:layers)"
],
"description":"返回图层集合"
},
"std:linetypes": {
"prefix" : "std:linetypes",
"body": [
"(std:linetypes)"
],
"description":"返回线型集合"
},
"std:model-space": {
"prefix" : "std:model-space",
"body": [
"(std:model-space)"
],
"description":"返回模型空间对象"
},
"std:protect-assign": {
"prefix" : "std:protect-assign",
"body": [
"(std:protect-assign ${1:syms})"
],
"description":""
},
"std:removemenuitem": {
"prefix" : "std:removemenuitem",
"body": [
"(std:removemenuitem ${1:popname})"
],
"description":""
},
"std:removesupportpath": {
"prefix" : "std:removesupportpath",
"body": [
"(std:removesupportpath ${1:lst})"
],
"description":""
},
"std:reset-system-variable": {
"prefix" : "std:reset-system-variable",
"body": [
"(std:reset-system-variable)"
],
"description":""
},
"std:return": {
"prefix" : "std:return",
"body": [
"(std:return ${1:value})"
],
"description":"返回值函数，用于包装将要返回的值，主要作用还是为了含义更明确。"
},
"std:rgb": {
"prefix" : "std:rgb",
"body": [
"(std:rgb ${1:red} ${2:green} ${3:blue})"
],
"description":"计算rgb颜色对应的整数值.\n red green blue 取值范围为 [0,255]的整数或[0,1)的小数。\n 返回值:rgb颜色值"
},
"std:save-system-variable": {
"prefix" : "std:save-system-variable",
"body": [
"(std:save-system-variable ${1:a})"
],
"description":""
},
"std:startundo": {
"prefix" : "std:startundo",
"body": [
"(std:startundo ${1:doc})"
],
"description":""
},
"std:textstyles": {
"prefix" : "std:textstyles",
"body": [
"(std:textstyles)"
],
"description":"返回字体样式集合"
},
"std:timer-end": {
"prefix" : "std:timer-end",
"body": [
"(std:timer-end)"
],
"description":"计时器结束函数"
},
"std:timer-start": {
"prefix" : "std:timer-start",
"body": [
"(std:timer-start)"
],
"description":"计时器开始函数\n 返回值:计时器全局变量"
},
"std:unprotect-assign": {
"prefix" : "std:unprotect-assign",
"body": [
"(std:unprotect-assign ${1:syms})"
],
"description":""
},
"string:align-by-length": {
"prefix" : "string:align-by-length",
"body": [
"(string:align-by-length ${1:str} ${2:len})"
],
"description":"将字节长度小于 len 的字符串前后增加空格，使其长度等于 len。可用于DCL中的字符对齐。\n 返回值:String"
},
"string:auto-split": {
"prefix" : "string:auto-split",
"body": [
"(string:auto-split ${1:str})"
],
"description":"自动分段，按数字-字母-汉字自动断开字符串为字符串列表。不支持科学计数法的数字。\n 返回值:由字符串组成的列表"
},
"string:bytelength": {
"prefix" : "string:bytelength",
"body": [
"(string:bytelength ${1:str})"
],
"description":"字符串的字节数，用于cad2021版本。\n 返回值:字符串的字节数"
},
"string:case": {
"prefix" : "string:case",
"body": [
"(string:case ${1:str})"
],
"description":"大小写替换"
},
"string:concat": {
"prefix" : "string:concat",
"body": [
"(string:concat ${1:strlst})"
],
"description":"连接字符串，连接前进行检测。"
},
"string:format": {
"prefix" : "string:format",
"body": [
"(string:format ${1:str} ${2:formatlist})"
],
"description":"字符串格式化函数"
},
"string:from-list": {
"prefix" : "string:from-list",
"body": [
"(string:from-list ${1:lst} ${2:separator})"
],
"description":"合并连接字符串表\n 返回值:String"
},
"string:from-lst": {
"prefix" : "string:from-lst",
"body": [
"(string:from-lst ${1:lst} ${2:separator})"
],
"description":"列表转成字符串"
},
"string:indent": {
"prefix" : "string:indent",
"body": [
"(string:indent ${1:str})"
],
"description":"缩进 lisp 代码"
},
"string:intp": {
"prefix" : "string:intp",
"body": [
"(string:intp ${1:str})"
],
"description":"确定字符串是否为整数"
},
"string:l2s-ansi": {
"prefix" : "string:l2s-ansi",
"body": [
"(string:l2s-ansi ${1:lst-str})"
],
"description":"byte or word 整数值列表转字符串。\n 当小于128时，单字节，当两个连续的大于128时，双字节值。用于转换非英文字串时防止重码。\n 当AutoCAD2021且lispsys=1时，与string:s2l-ansi 成对兼容 unicode."
},
"string:length": {
"prefix" : "string:length",
"body": [
"(string:length ${1:str})"
],
"description":"字符串长度，一个汉字占1位。\n 返回值:int"
},
"string:lsubstr": {
"prefix" : "string:lsubstr",
"body": [
"(string:lsubstr ${1:str} ${2:len})"
],
"description":"从左侧求子串"
},
"string:num-compare": {
"prefix" : "string:num-compare",
"body": [
"(string:num-compare ${1:fun} ${2:str1} ${3:str2})"
],
"description":"字符串在夹杂数字时，如果数字前后的字符串相同，按数字大小比较。fun 可用函数为 >, >=, <, <=,2020-03-31\n 返回值:T or nil"
},
"string:number-format": {
"prefix" : "string:number-format",
"body": [
"(string:number-format ${1:str-num} ${2:int-n} ${3:int-fraction} ${4:str-fill})"
],
"description":"格式化数字输出。使输出的字符串长度一致。参数: str-num:数字字符串，int-n,整数位数，int-fraction:小数位数，str-fill:填充字符\n 返回值:字符串"
},
"string:number2chinese": {
"prefix" : "string:number2chinese",
"body": [
"(string:number2chinese ${1:num})"
],
"description":"将数字转化为汉语大写.,仅支持到万亿，只支持整数\n 返回值:String"
},
"string:numberp": {
"prefix" : "string:numberp",
"body": [
"(string:numberp ${1:str})"
],
"description":"确定字符串是否为数字"
},
"string:parse-by-lst": {
"prefix" : "string:parse-by-lst",
"body": [
"(string:parse-by-lst ${1:lstr} ${2:delimlst})"
],
"description":"字符串按分隔符列表转列表\n 返回值:拆分后的列表"
},
"string:readme": {
"prefix" : "string:readme",
"body": [
"(string:readme)"
],
"description":"字符串操作相关函数。"
},
"string:realp": {
"prefix" : "string:realp",
"body": [
"(string:realp ${1:str})"
],
"description":"确定字符串是否为实数"
},
"string:regexp-replace": {
"prefix" : "string:regexp-replace",
"body": [
"(string:regexp-replace ${1:string} ${2:newstr} ${3:express} ${4:key})"
],
"description":"正则表达式替换字串"
},
"string:regexp-search": {
"prefix" : "string:regexp-search",
"body": [
"(string:regexp-search ${1:string} ${2:express} ${3:key})"
],
"description":"正则表达式搜索字串. Express = 正则表达式 key = 字母 i I m M g G的组合字串"
},
"string:reverse": {
"prefix" : "string:reverse",
"body": [
"(string:reverse ${1:str})"
],
"description":"反转字符串,支持中文\n 返回值:Str"
},
"string:rightsubstr": {
"prefix" : "string:rightsubstr",
"body": [
"(string:rightsubstr ${1:str} ${2:start} ${3:len})"
],
"description":"从右侧求子串"
},
"string:rsubstr": {
"prefix" : "string:rsubstr",
"body": [
"(string:rsubstr ${1:str} ${2:len})"
],
"description":"从右侧截取子串"
},
"string:s2l-ansi": {
"prefix" : "string:s2l-ansi",
"body": [
"(string:s2l-ansi ${1:str})"
],
"description":"字符串转字byte or word 整数值列表。\n 当小于128时，单字节，当两个连续的大于128时，双字节值。用于转换非英文字串时防止重码。\n 当AutoCAD2021且lispsys=1时，返回 unicode 码。"
},
"string:search": {
"prefix" : "string:search",
"body": [
"(string:search ${1:pattern} ${2:str})"
],
"description":"搜索字符串pattern 是否为 str的子串，是返回位置（汉字占一位）。\n 返回值:int"
},
"string:sort-by-number": {
"prefix" : "string:sort-by-number",
"body": [
"(string:sort-by-number ${1:lst-str})"
],
"description":"按数字排序字符串\n 在夹杂数字时，如果数字前后的字符串相同，按数字大小排序\n 返回值:排序后的字符串表"
},
"string:square": {
"prefix" : "string:square",
"body": [
"(string:square ${1:int} ${2:str})"
],
"description":"字符串自乘"
},
"string:subst-all": {
"prefix" : "string:subst-all",
"body": [
"(string:subst-all ${1:str-new} ${2:str-old} ${3:str})"
],
"description":"用 str-new 替换 字符串中所有的 str-old \n 返回值:结果字符串"
},
"string:substr": {
"prefix" : "string:substr",
"body": [
"(string:substr ${1:str} ${2:start} ${3:len})"
],
"description":"截取字符串，ansi 字符按 1 位 计算。start 最小值为 1, len 最小为1 \n 返回值:结果字符串"
},
"string:to-list": {
"prefix" : "string:to-list",
"body": [
"(string:to-list ${1:str} ${2:separator})"
],
"description":"字符串转成列表"
},
"string:to-lst": {
"prefix" : "string:to-lst",
"body": [
"(string:to-lst ${1:str} ${2:separator})"
],
"description":"字符串分隔成列表"
},
"string:trim-space": {
"prefix" : "string:trim-space",
"body": [
"(string:trim-space ${1:string})"
],
"description":"去除字符串中的空格"
},
"style:missing-fonts": {
"prefix" : "style:missing-fonts",
"body": [
"(style:missing-fonts)"
],
"description":"检查缺少的字体，如果有返回字体文件名组成的列表，没有返回nil\n 返回值:字体文件名组成的列表,或nil"
},
"sys:list-process": {
"prefix" : "sys:list-process",
"body": [
"(sys:list-process)"
],
"description":"获取当前运行的进程对象列表。"
},
"sys:list-process-name": {
"prefix" : "sys:list-process-name",
"body": [
"(sys:list-process-name)"
],
"description":"获取当前运行的进程名(exe文件名)。\n 返回值:String"
},
"system:vers": {
"prefix" : "system:vers",
"body": [
"(system:vers)"
],
"description":"CAD版本号"
},
"table:make": {
"prefix" : "table:make",
"body": [
"(table:make ${1:pt} ${2:title} ${3:headers} ${4:mat-data})"
],
"description":"创建表格，参数: \n pt:位置点，\n title:标题 ， \n headers:表头表\n mat-data: 单元数据矩阵,目前仅支持文字型表格\n 返回值:表格图元"
},
"table:read-csv": {
"prefix" : "table:read-csv",
"body": [
"(table:read-csv ${1:file})"
],
"description":"读取 csv 文件。\n 返回值:二维表"
},
"table:write-csv": {
"prefix" : "table:write-csv",
"body": [
"(table:write-csv ${1:lst} ${2:file})"
],
"description":"将 二维表 写入 csv 文件。"
},
"text:get-matrix": {
"prefix" : "text:get-matrix",
"body": [
"(text:get-matrix)"
],
"description":"从dwg图中框取单行文本，形成二维列表数据\n 返回值:由字符串组成的二维列表"
},
"text:get-mtext": {
"prefix" : "text:get-mtext",
"body": [
"(text:get-mtext ${1:en-mtext})"
],
"description":"取多行文件的内容。当内容长度大于255时，会有多个组码 3.本函数用于组合这些字符串为一整体。\n 返回值:字符串"
},
"text:gettextwidth": {
"prefix" : "text:gettextwidth",
"body": [
"(text:gettextwidth ${1:str} ${2:edata})"
],
"description":""
},
"text:parse-mtext": {
"prefix" : "text:parse-mtext",
"body": [
"(text:parse-mtext ${1:str-m})"
],
"description":"解析多行文本中的格式化字符串，目前为测试版，不保证结果完全正确。\n 返回值:结果表. ((fmt . t)(str)...(fmt . t)). 某单元为点对且 (cdr 单元)\n   为 t 时表示为格式串，nil 时为的内容串"
},
"text:remove-fmt": {
"prefix" : "text:remove-fmt",
"body": [
"(text:remove-fmt ${1:str-mtext})"
],
"description":"去除多行文本中的格式化字符串.\n 返回值:结果字符串"
},
"text:stringexplode": {
"prefix" : "text:stringexplode",
"body": [
"(text:stringexplode ${1:str_given})"
],
"description":""
},
"timer:begin": {
"prefix" : "timer:begin",
"body": [
"(timer:begin)"
],
"description":"计时器开始"
},
"timer:end": {
"prefix" : "timer:end",
"body": [
"(timer:end ${1:time} ${2:p})"
],
"description":"计时器结束。time 开始时间 p 是否打印。"
},
"ui:button-select": {
"prefix" : "ui:button-select",
"body": [
"(ui:button-select ${1:str-subject} ${2:lst})"
],
"description":"显示按钮列表选择面板。\n 选择所需项并返回，无需点击确定。\n 返回值:选中的内容"
},
"ui:confirm": {
"prefix" : "ui:confirm",
"body": [
"(ui:confirm ${1:lst-str})"
],
"description":"确认对话框. 参数：lst-str 单个字符串，或字符串列表。\n 返回值:T or nil"
},
"ui:confirm1": {
"prefix" : "ui:confirm1",
"body": [
"(ui:confirm1 ${1:lst-str} ${2:str-yes-no})"
],
"description":"确认对话框1.\n  参数：lst-str 单个字符串，或字符串列表。\n 参数 str-Yes-No 字符串用 - 分隔成两部分，前面为accept,后面为 Cancel.如 是-否，愿意-不愿意。\n 返回值:T or nil"
},
"ui:dynquery": {
"prefix" : "ui:dynquery",
"body": [
"(ui:dynquery ${1:func})"
],
"description":"动态查询。显示 func 返回的文本列表。func 是对图标所在图元进行的运算结果。形式如 '(lambda (x)\n     (list (entity:getdxf x 0)))\n   \n 返回值:nil,执行过程动态显示用户定义的内容"
},
"ui:input": {
"prefix" : "ui:input",
"body": [
"(ui:input ${1:str-subject} ${2:lst})"
],
"description":"显示输入一个或多个文本输入的面板，返回所有文本框的值。\n lst 由一个或多个列表组成 \n     每个元素由 (label 默认值 说明 是否密文/列表及列表默认序号(以0开始))\n   组成 。\n label 不可省略，默认值、说明和密文/序号 可省略。当为 <*> 时，为特殊处理符号，如 <hr> 水平线，<text> 单行文本。\n 默认值(第二项):\n     当没有默认值及以后各项时，显示为文本编辑框\n     当为数值型和字符串时，且第4项不为列表时显示文本编辑框\n     当为数值型和字符串时，且第4项为列表时显示下拉菜单\n     当为数值型和字符串时，且第4项为 T 时显示密码编辑框\n     当为 T or nil 时，显示复选框，\n     当为列表时，显示下拉菜单。第4项为数字时，为列表默认值索引号。\n \n 返回值:所有输入框的 label 和 值 组成的点对表，或 nil"
},
"ui:progress": {
"prefix" : "ui:progress",
"body": [
"(ui:progress ${1:current} ${2:max-number})"
],
"description":"\n 提供一个进度条功能函数，current 是当前进度   max-number 是进度总量\n 调用完成之后，可以使用(GRTEXT)\n   清除进度\n \n 返回值:无返回值"
},
"ui:progress1": {
"prefix" : "ui:progress1",
"body": [
"(ui:progress1 ${1:ratio})"
],
"description":"基于 ACET 的状态栏进度条."
},
"ui:select": {
"prefix" : "ui:select",
"body": [
"(ui:select ${1:str-subject} ${2:lst})"
],
"description":"显示列表选择面板，选择所需项并返回。\n 返回值:选中的内容"
},
"ui:select-multi": {
"prefix" : "ui:select-multi",
"body": [
"(ui:select-multi ${1:str-subject} ${2:lst})"
],
"description":"显示列表选择面板，选择多个所需项并返回。\n 返回值:选中的内容"
},
"ui:table": {
"prefix" : "ui:table",
"body": [
"(ui:table ${1:lst-data})"
],
"description":"表格编辑,纯DCL方式实现,使用前先设置 ui:*table-title* 标题，赋值给 ui:*table-numbers-per-page* (整数)，可以设置每页的行数(默认为20)。ui:*table-widths* 用于定义每列的宽度，默认每列宽度为10。最大支持列数为26列。\n 返回值:修改后的数据"
},
"ui:table-widths": {
"prefix" : "ui:table-widths",
"body": [
"(ui:table-widths ${1:lst-data})"
],
"description":"求用于dcl表格的各列的自适应宽度。\n 返回值:数值表"
},
"vectra:acos": {
"prefix" : "vectra:acos",
"body": [
"(vectra:acos ${1:f})"
],
"description":""
},
"vectra:angle-include": {
"prefix" : "vectra:angle-include",
"body": [
"(vectra:angle-include ${1:a1} ${2:a2})"
],
"description":""
},
"vectra:angle-normal": {
"prefix" : "vectra:angle-normal",
"body": [
"(vectra:angle-normal ${1:a})"
],
"description":""
},
"vectra:angle-regular": {
"prefix" : "vectra:angle-regular",
"body": [
"(vectra:angle-regular ${1:a})"
],
"description":""
},
"vectra:angle-reverse": {
"prefix" : "vectra:angle-reverse",
"body": [
"(vectra:angle-reverse ${1:a})"
],
"description":""
},
"vectra:array-create": {
"prefix" : "vectra:array-create",
"body": [
"(vectra:array-create ${1:n})"
],
"description":""
},
"vectra:array-get": {
"prefix" : "vectra:array-get",
"body": [
"(vectra:array-get ${1:arr} ${2:n})"
],
"description":""
},
"vectra:array-set": {
"prefix" : "vectra:array-set",
"body": [
"(vectra:array-set ${1:arr} ${2:n} ${3:value})"
],
"description":""
},
"vectra:benchmark": {
"prefix" : "vectra:benchmark",
"body": [
"(vectra:benchmark ${1:expr} ${2:n})"
],
"description":""
},
"vectra:block-items": {
"prefix" : "vectra:block-items",
"body": [
"(vectra:block-items ${1:en})"
],
"description":""
},
"vectra:block-items-inner": {
"prefix" : "vectra:block-items-inner",
"body": [
"(vectra:block-items-inner ${1:en})"
],
"description":""
},
"vectra:block-trans": {
"prefix" : "vectra:block-trans",
"body": [
"(vectra:block-trans ${1:p} ${2:geom})"
],
"description":""
},
"vectra:ceiling": {
"prefix" : "vectra:ceiling",
"body": [
"(vectra:ceiling ${1:f} ${2:dig})"
],
"description":""
},
"vectra:clipboard-get": {
"prefix" : "vectra:clipboard-get",
"body": [
"(vectra:clipboard-get)"
],
"description":""
},
"vectra:clipboard-set": {
"prefix" : "vectra:clipboard-set",
"body": [
"(vectra:clipboard-set ${1:str})"
],
"description":""
},
"vectra:commandrun": {
"prefix" : "vectra:commandrun",
"body": [
"(vectra:commandrun ${1:func})"
],
"description":""
},
"vectra:commandrun-s": {
"prefix" : "vectra:commandrun-s",
"body": [
"(vectra:commandrun-s ${1:func} ${2:sysvars})"
],
"description":""
},
"vectra:confirm": {
"prefix" : "vectra:confirm",
"body": [
"(vectra:confirm ${1:msg} ${2:default})"
],
"description":""
},
"vectra:csvfile-read": {
"prefix" : "vectra:csvfile-read",
"body": [
"(vectra:csvfile-read ${1:filename})"
],
"description":""
},
"vectra:csvfile-readcache": {
"prefix" : "vectra:csvfile-readcache",
"body": [
"(vectra:csvfile-readcache ${1:filename} ${2:cache})"
],
"description":""
},
"vectra:csvread-get": {
"prefix" : "vectra:csvread-get",
"body": [
"(vectra:csvread-get ${1:csv} ${2:key})"
],
"description":""
},
"vectra:csvread-get1": {
"prefix" : "vectra:csvread-get1",
"body": [
"(vectra:csvread-get1 ${1:csv} ${2:key})"
],
"description":""
},
"vectra:csvread-keys": {
"prefix" : "vectra:csvread-keys",
"body": [
"(vectra:csvread-keys ${1:csv})"
],
"description":""
},
"vectra:directory-make": {
"prefix" : "vectra:directory-make",
"body": [
"(vectra:directory-make ${1:folder})"
],
"description":""
},
"vectra:dxf": {
"prefix" : "vectra:dxf",
"body": [
"(vectra:dxf ${1:ename} ${2:keys})"
],
"description":""
},
"vectra:dxf1": {
"prefix" : "vectra:dxf1",
"body": [
"(vectra:dxf1 ${1:ename} ${2:keys})"
],
"description":""
},
"vectra:dxfs": {
"prefix" : "vectra:dxfs",
"body": [
"(vectra:dxfs ${1:ename} ${2:sym} ${3:keys})"
],
"description":""
},
"vectra:edit-value": {
"prefix" : "vectra:edit-value",
"body": [
"(vectra:edit-value ${1:msg} ${2:old})"
],
"description":""
},
"vectra:enamep": {
"prefix" : "vectra:enamep",
"body": [
"(vectra:enamep ${1:v})"
],
"description":""
},
"vectra:enames-after": {
"prefix" : "vectra:enames-after",
"body": [
"(vectra:enames-after ${1:en} ${2:ss})"
],
"description":""
},
"vectra:endundomark": {
"prefix" : "vectra:endundomark",
"body": [
"(vectra:endundomark)"
],
"description":""
},
"vectra:ensure-ename": {
"prefix" : "vectra:ensure-ename",
"body": [
"(vectra:ensure-ename ${1:obj})"
],
"description":""
},
"vectra:ensure-object": {
"prefix" : "vectra:ensure-object",
"body": [
"(vectra:ensure-object ${1:obj})"
],
"description":""
},
"vectra:entmake": {
"prefix" : "vectra:entmake",
"body": [
"(vectra:entmake ${1:dxf})"
],
"description":""
},
"vectra:entmod": {
"prefix" : "vectra:entmod",
"body": [
"(vectra:entmod ${1:ent} ${2:datas})"
],
"description":""
},
"vectra:entsel": {
"prefix" : "vectra:entsel",
"body": [
"(vectra:entsel ${1:msg} ${2:filter})"
],
"description":""
},
"vectra:entsel-inner": {
"prefix" : "vectra:entsel-inner",
"body": [
"(vectra:entsel-inner ${1:msg} ${2:filter} ${3:nested})"
],
"description":""
},
"vectra:error-end": {
"prefix" : "vectra:error-end",
"body": [
"(vectra:error-end)"
],
"description":""
},
"vectra:error-handler": {
"prefix" : "vectra:error-handler",
"body": [
"(vectra:error-handler ${1:s})"
],
"description":""
},
"vectra:error-start": {
"prefix" : "vectra:error-start",
"body": [
"(vectra:error-start ${1:vars})"
],
"description":""
},
"vectra:error-start0": {
"prefix" : "vectra:error-start0",
"body": [
"(vectra:error-start0)"
],
"description":""
},
"vectra:file-read": {
"prefix" : "vectra:file-read",
"body": [
"(vectra:file-read ${1:filename})"
],
"description":""
},
"vectra:file-readstring": {
"prefix" : "vectra:file-readstring",
"body": [
"(vectra:file-readstring ${1:filename})"
],
"description":""
},
"vectra:file-search": {
"prefix" : "vectra:file-search",
"body": [
"(vectra:file-search ${1:path} ${2:patten})"
],
"description":""
},
"vectra:get": {
"prefix" : "vectra:get",
"body": [
"(vectra:get ${1:lst} ${2:keys})"
],
"description":""
},
"vectra:get-block": {
"prefix" : "vectra:get-block",
"body": [
"(vectra:get-block ${1:name})"
],
"description":""
},
"vectra:get-bulge": {
"prefix" : "vectra:get-bulge",
"body": [
"(vectra:get-bulge ${1:v1} ${2:v2})"
],
"description":""
},
"vectra:get1": {
"prefix" : "vectra:get1",
"body": [
"(vectra:get1 ${1:lst} ${2:keys})"
],
"description":""
},
"vectra:getdist": {
"prefix" : "vectra:getdist",
"body": [
"(vectra:getdist ${1:msg} ${2:old} ${3:p})"
],
"description":""
},
"vectra:getint": {
"prefix" : "vectra:getint",
"body": [
"(vectra:getint ${1:msg} ${2:init} ${3:default})"
],
"description":"从命令行获取整数。\n 返回值:int"
},
"vectra:getkword": {
"prefix" : "vectra:getkword",
"body": [
"(vectra:getkword ${1:msg} ${2:kword} ${3:default})"
],
"description":""
},
"vectra:getkword1": {
"prefix" : "vectra:getkword1",
"body": [
"(vectra:getkword1 ${1:msg} ${2:kwords} ${3:default})"
],
"description":""
},
"vectra:hash": {
"prefix" : "vectra:hash",
"body": [
"(vectra:hash ${1:lst})"
],
"description":""
},
"vectra:hash-1": {
"prefix" : "vectra:hash-1",
"body": [
"(vectra:hash-1 ${1:e} ${2:h})"
],
"description":""
},
"vectra:insert-seqs": {
"prefix" : "vectra:insert-seqs",
"body": [
"(vectra:insert-seqs ${1:en})"
],
"description":""
},
"vectra:item": {
"prefix" : "vectra:item",
"body": [
"(vectra:item ${1:obj} ${2:name})"
],
"description":""
},
"vectra:jscript-eval": {
"prefix" : "vectra:jscript-eval",
"body": [
"(vectra:jscript-eval ${1:func_str})"
],
"description":""
},
"vectra:layer-get": {
"prefix" : "vectra:layer-get",
"body": [
"(vectra:layer-get ${1:name} ${2:conf})"
],
"description":""
},
"vectra:layer-get1": {
"prefix" : "vectra:layer-get1",
"body": [
"(vectra:layer-get1 ${1:name} ${2:dxf})"
],
"description":""
},
"vectra:line-closestpoint": {
"prefix" : "vectra:line-closestpoint",
"body": [
"(vectra:line-closestpoint ${1:line} ${2:p} ${3:extend})"
],
"description":""
},
"vectra:line-getangle": {
"prefix" : "vectra:line-getangle",
"body": [
"(vectra:line-getangle ${1:line})"
],
"description":""
},
"vectra:line-getendnear": {
"prefix" : "vectra:line-getendnear",
"body": [
"(vectra:line-getendnear ${1:line} ${2:p})"
],
"description":""
},
"vectra:line-getinters": {
"prefix" : "vectra:line-getinters",
"body": [
"(vectra:line-getinters ${1:l1} ${2:l2})"
],
"description":""
},
"vectra:line-parallel": {
"prefix" : "vectra:line-parallel",
"body": [
"(vectra:line-parallel ${1:l1} ${2:l2})"
],
"description":""
},
"vectra:linetype-get": {
"prefix" : "vectra:linetype-get",
"body": [
"(vectra:linetype-get ${1:name})"
],
"description":""
},
"vectra:linetype-load": {
"prefix" : "vectra:linetype-load",
"body": [
"(vectra:linetype-load ${1:name} ${2:filename})"
],
"description":""
},
"vectra:lisp-load": {
"prefix" : "vectra:lisp-load",
"body": [
"(vectra:lisp-load ${1:filename})"
],
"description":""
},
"vectra:make-arc": {
"prefix" : "vectra:make-arc",
"body": [
"(vectra:make-arc ${1:point} ${2:radius} ${3:start} ${4:end})"
],
"description":""
},
"vectra:make-block": {
"prefix" : "vectra:make-block",
"body": [
"(vectra:make-block ${1:name} ${2:funcname} ${3:params})"
],
"description":""
},
"vectra:make-circle": {
"prefix" : "vectra:make-circle",
"body": [
"(vectra:make-circle ${1:center} ${2:radius})"
],
"description":""
},
"vectra:make-ellipse": {
"prefix" : "vectra:make-ellipse",
"body": [
"(vectra:make-ellipse ${1:p1} ${2:p2} ${3:r1})"
],
"description":""
},
"vectra:make-insert": {
"prefix" : "vectra:make-insert",
"body": [
"(vectra:make-insert ${1:name} ${2:point} ${3:sx} ${4:sy} ${5:sz} ${6:ang})"
],
"description":""
},
"vectra:make-insert-with-funcs": {
"prefix" : "vectra:make-insert-with-funcs",
"body": [
"(vectra:make-insert-with-funcs ${1:name} ${2:point} ${3:funcname} ${4:params})"
],
"description":""
},
"vectra:make-insert-with-funcs-a": {
"prefix" : "vectra:make-insert-with-funcs-a",
"body": [
"(vectra:make-insert-with-funcs-a ${1:name} ${2:point} ${3:funcname} ${4:params} ${5:sx} ${6:sy} ${7:sz} ${8:ang})"
],
"description":""
},
"vectra:make-line": {
"prefix" : "vectra:make-line",
"body": [
"(vectra:make-line ${1:p1} ${2:p2})"
],
"description":""
},
"vectra:make-polyline": {
"prefix" : "vectra:make-polyline",
"body": [
"(vectra:make-polyline ${1:points} ${2:closed} ${3:width})"
],
"description":""
},
"vectra:make-setenv": {
"prefix" : "vectra:make-setenv",
"body": [
"(vectra:make-setenv ${1:vars})"
],
"description":""
},
"vectra:make-sharparc": {
"prefix" : "vectra:make-sharparc",
"body": [
"(vectra:make-sharparc ${1:p} ${2:r} ${3:a4} ${4:a5})"
],
"description":""
},
"vectra:make-text": {
"prefix" : "vectra:make-text",
"body": [
"(vectra:make-text ${1:text} ${2:point} ${3:align} ${4:height} ${5:width} ${6:ang})"
],
"description":""
},
"vectra:mid": {
"prefix" : "vectra:mid",
"body": [
"(vectra:mid ${1:p1} ${2:p2})"
],
"description":""
},
"vectra:mxm": {
"prefix" : "vectra:mxm",
"body": [
"(vectra:mxm ${1:m} ${2:q})"
],
"description":""
},
"vectra:mxv": {
"prefix" : "vectra:mxv",
"body": [
"(vectra:mxv ${1:m} ${2:v})"
],
"description":""
},
"vectra:nentsel": {
"prefix" : "vectra:nentsel",
"body": [
"(vectra:nentsel ${1:msg} ${2:filter})"
],
"description":""
},
"vectra:number-padding": {
"prefix" : "vectra:number-padding",
"body": [
"(vectra:number-padding ${1:number} ${2:len})"
],
"description":""
},
"vectra:number-padding-last": {
"prefix" : "vectra:number-padding-last",
"body": [
"(vectra:number-padding-last ${1:number} ${2:len})"
],
"description":""
},
"vectra:osnap-disable": {
"prefix" : "vectra:osnap-disable",
"body": [
"(vectra:osnap-disable)"
],
"description":""
},
"vectra:osnap-restore": {
"prefix" : "vectra:osnap-restore",
"body": [
"(vectra:osnap-restore)"
],
"description":""
},
"vectra:readme": {
"prefix" : "vectra:readme",
"body": [
"(vectra:readme)"
],
"description":"来源于明经大佬 vectra 开源的 152个函数."
},
"vectra:refgeom": {
"prefix" : "vectra:refgeom",
"body": [
"(vectra:refgeom ${1:ename})"
],
"description":""
},
"vectra:regexp-match": {
"prefix" : "vectra:regexp-match",
"body": [
"(vectra:regexp-match ${1:str} ${2:pattern})"
],
"description":""
},
"vectra:regexp-replace": {
"prefix" : "vectra:regexp-replace",
"body": [
"(vectra:regexp-replace ${1:str} ${2:pattern} ${3:new})"
],
"description":""
},
"vectra:round": {
"prefix" : "vectra:round",
"body": [
"(vectra:round ${1:f} ${2:num})"
],
"description":""
},
"vectra:set": {
"prefix" : "vectra:set",
"body": [
"(vectra:set ${1:lst} ${2:values})"
],
"description":""
},
"vectra:set-symbol-notnull": {
"prefix" : "vectra:set-symbol-notnull",
"body": [
"(vectra:set-symbol-notnull ${1:sym} ${2:val})"
],
"description":""
},
"vectra:set-values": {
"prefix" : "vectra:set-values",
"body": [
"(vectra:set-values ${1:lst})"
],
"description":""
},
"vectra:set1": {
"prefix" : "vectra:set1",
"body": [
"(vectra:set1 ${1:lst} ${2:key} ${3:value})"
],
"description":""
},
"vectra:setvars": {
"prefix" : "vectra:setvars",
"body": [
"(vectra:setvars ${1:pairs})"
],
"description":""
},
"vectra:sqr": {
"prefix" : "vectra:sqr",
"body": [
"(vectra:sqr ${1:f})"
],
"description":""
},
"vectra:ss-highlight": {
"prefix" : "vectra:ss-highlight",
"body": [
"(vectra:ss-highlight ${1:ss})"
],
"description":""
},
"vectra:ss-highlight-inner": {
"prefix" : "vectra:ss-highlight-inner",
"body": [
"(vectra:ss-highlight-inner ${1:ss} ${2:status})"
],
"description":""
},
"vectra:startundomark": {
"prefix" : "vectra:startundomark",
"body": [
"(vectra:startundomark)"
],
"description":""
},
"vectra:string-connect": {
"prefix" : "vectra:string-connect",
"body": [
"(vectra:string-connect ${1:lst} ${2:delim})"
],
"description":""
},
"vectra:string-left": {
"prefix" : "vectra:string-left",
"body": [
"(vectra:string-left ${1:str} ${2:n})"
],
"description":""
},
"vectra:string-right": {
"prefix" : "vectra:string-right",
"body": [
"(vectra:string-right ${1:str} ${2:n})"
],
"description":""
},
"vectra:string-setnotempty": {
"prefix" : "vectra:string-setnotempty",
"body": [
"(vectra:string-setnotempty ${1:symbol} ${2:value})"
],
"description":""
},
"vectra:string-subst": {
"prefix" : "vectra:string-subst",
"body": [
"(vectra:string-subst ${1:str} ${2:find} ${3:repl})"
],
"description":""
},
"vectra:string-substp": {
"prefix" : "vectra:string-substp",
"body": [
"(vectra:string-substp ${1:str} ${2:find} ${3:repl} ${4:p})"
],
"description":""
},
"vectra:string-tokenize": {
"prefix" : "vectra:string-tokenize",
"body": [
"(vectra:string-tokenize ${1:str} ${2:delim})"
],
"description":""
},
"vectra:stringp": {
"prefix" : "vectra:stringp",
"body": [
"(vectra:stringp ${1:v})"
],
"description":""
},
"vectra:tan": {
"prefix" : "vectra:tan",
"body": [
"(vectra:tan ${1:a})"
],
"description":""
},
"vectra:template-eval": {
"prefix" : "vectra:template-eval",
"body": [
"(vectra:template-eval ${1:template} ${2:params})"
],
"description":""
},
"vectra:template-parse": {
"prefix" : "vectra:template-parse",
"body": [
"(vectra:template-parse ${1:template})"
],
"description":""
},
"vectra:template-parse-inner": {
"prefix" : "vectra:template-parse-inner",
"body": [
"(vectra:template-parse-inner ${1:template} ${2:gs} ${3:ge})"
],
"description":""
},
"vectra:textstyle-get": {
"prefix" : "vectra:textstyle-get",
"body": [
"(vectra:textstyle-get ${1:name} ${2:font} ${3:bigfont} ${4:width})"
],
"description":""
},
"vectra:timer-start": {
"prefix" : "vectra:timer-start",
"body": [
"(vectra:timer-start)"
],
"description":""
},
"vectra:timer-stop": {
"prefix" : "vectra:timer-stop",
"body": [
"(vectra:timer-stop)"
],
"description":""
},
"vectra:timestamp": {
"prefix" : "vectra:timestamp",
"body": [
"(vectra:timestamp)"
],
"description":""
},
"vectra:trp": {
"prefix" : "vectra:trp",
"body": [
"(vectra:trp ${1:m})"
],
"description":""
},
"vectra:uid": {
"prefix" : "vectra:uid",
"body": [
"(vectra:uid)"
],
"description":""
},
"vectra:unset": {
"prefix" : "vectra:unset",
"body": [
"(vectra:unset ${1:lst} ${2:keys})"
],
"description":""
},
"vectra:vector-angle": {
"prefix" : "vectra:vector-angle",
"body": [
"(vectra:vector-angle ${1:v})"
],
"description":""
},
"vectra:vector-angle2": {
"prefix" : "vectra:vector-angle2",
"body": [
"(vectra:vector-angle2 ${1:v1} ${2:v2})"
],
"description":""
},
"vectra:vector-dotproduct": {
"prefix" : "vectra:vector-dotproduct",
"body": [
"(vectra:vector-dotproduct ${1:v1} ${2:v2})"
],
"description":""
},
"vectra:vector-from2p": {
"prefix" : "vectra:vector-from2p",
"body": [
"(vectra:vector-from2p ${1:p1} ${2:p2})"
],
"description":""
},
"vectra:vector-len": {
"prefix" : "vectra:vector-len",
"body": [
"(vectra:vector-len ${1:v})"
],
"description":""
},
"vectra:vector-normal": {
"prefix" : "vectra:vector-normal",
"body": [
"(vectra:vector-normal ${1:v})"
],
"description":""
},
"vectra:vector-reverse": {
"prefix" : "vectra:vector-reverse",
"body": [
"(vectra:vector-reverse ${1:v})"
],
"description":""
},
"vectra:xdata-all": {
"prefix" : "vectra:xdata-all",
"body": [
"(vectra:xdata-all ${1:ename})"
],
"description":""
},
"vectra:xdata-exist": {
"prefix" : "vectra:xdata-exist",
"body": [
"(vectra:xdata-exist ${1:ename} ${2:key})"
],
"description":""
},
"vectra:xdata-get": {
"prefix" : "vectra:xdata-get",
"body": [
"(vectra:xdata-get ${1:ename} ${2:appname})"
],
"description":""
},
"vectra:xdata-get-inner": {
"prefix" : "vectra:xdata-get-inner",
"body": [
"(vectra:xdata-get-inner ${1:ename} ${2:appname})"
],
"description":""
},
"vectra:xdata-keys": {
"prefix" : "vectra:xdata-keys",
"body": [
"(vectra:xdata-keys ${1:ename})"
],
"description":""
},
"vectra:xdata-remove": {
"prefix" : "vectra:xdata-remove",
"body": [
"(vectra:xdata-remove ${1:ename} ${2:appid})"
],
"description":""
},
"vectra:xdata-set": {
"prefix" : "vectra:xdata-set",
"body": [
"(vectra:xdata-set ${1:ename} ${2:appid} ${3:xdata})"
],
"description":""
},
"vectra:xdata-set-inner": {
"prefix" : "vectra:xdata-set-inner",
"body": [
"(vectra:xdata-set-inner ${1:ename} ${2:xdata})"
],
"description":""
},
"vectra:xprop-exist": {
"prefix" : "vectra:xprop-exist",
"body": [
"(vectra:xprop-exist ${1:ename} ${2:appname} ${3:names})"
],
"description":""
},
"vectra:xprop-get": {
"prefix" : "vectra:xprop-get",
"body": [
"(vectra:xprop-get ${1:ename} ${2:appname} ${3:names})"
],
"description":""
},
"vectra:xprop-getall": {
"prefix" : "vectra:xprop-getall",
"body": [
"(vectra:xprop-getall ${1:ename} ${2:appname})"
],
"description":""
},
"vectra:xprop-pack": {
"prefix" : "vectra:xprop-pack",
"body": [
"(vectra:xprop-pack ${1:properties} ${2:xdatatypes})"
],
"description":""
},
"vectra:xprop-pack1": {
"prefix" : "vectra:xprop-pack1",
"body": [
"(vectra:xprop-pack1 ${1:kv} ${2:xdatatypes})"
],
"description":""
},
"vectra:xprop-remove": {
"prefix" : "vectra:xprop-remove",
"body": [
"(vectra:xprop-remove ${1:ename} ${2:appname} ${3:names})"
],
"description":""
},
"vectra:xprop-replace": {
"prefix" : "vectra:xprop-replace",
"body": [
"(vectra:xprop-replace ${1:ename} ${2:appname} ${3:prop} ${4:datadef})"
],
"description":""
},
"vectra:xprop-set": {
"prefix" : "vectra:xprop-set",
"body": [
"(vectra:xprop-set ${1:ename} ${2:appname} ${3:prop})"
],
"description":""
},
"vectra:xprop-set-inner": {
"prefix" : "vectra:xprop-set-inner",
"body": [
"(vectra:xprop-set-inner ${1:ename} ${2:appname} ${3:prop} ${4:datadef})"
],
"description":""
},
"vectra:xprop-unpack": {
"prefix" : "vectra:xprop-unpack",
"body": [
"(vectra:xprop-unpack ${1:xdata})"
],
"description":""
},
"vitalgg:helloworld": {
"prefix" : "vitalgg:helloworld",
"body": [
"(vitalgg:helloworld)"
],
"description":"函数功能说明，以及参数说明，作者等信息\n 返回值:返回值类型及说明"
},
"vitalgg:test": {
"prefix" : "vitalgg:test",
"body": [
"(vitalgg:test ${1:str})"
],
"description":"用于测试的函数，str 为字符串，by VitalGG\n 返回值:int: 参数字符串的第一个字母的 ascii 码"
},
"vla:buildfilter": {
"prefix" : "vla:buildfilter",
"body": [
"(vla:buildfilter ${1:filter})"
],
"description":"构建variant列表\n 参数：\n filter:点对列表\n 返回值:variant列表"
},
"vla:dump": {
"prefix" : "vla:dump",
"body": [
"(vla:dump ${1:obj})"
],
"description":"列对象属性和方法。"
},
"vla:get-value": {
"prefix" : "vla:get-value",
"body": [
"(vla:get-value ${1:var})"
],
"description":"变体里取值.参数 var:变体或者数组\n 返回值:数据列表"
},
"vla:objarray": {
"prefix" : "vla:objarray",
"body": [
"(vla:objarray ${1:lst})"
],
"description":"创建vla对象数组\n 参    数:lst:vla对象表\n 返回值:返 回 值:vla对象数组"
},
"vla:objectvariant": {
"prefix" : "vla:objectvariant",
"body": [
"(vla:objectvariant ${1:lst})"
],
"description":"创建vla对象表变体.\n 参数：\n lst:vla对象表\n 返回值:变体"
},
"vla:sel": {
"prefix" : "vla:sel",
"body": [
"(vla:sel)"
],
"description":"单选对象。\n 返回值:vla-object 对象"
},
"vla:to-ename": {
"prefix" : "vla:to-ename",
"body": [
"(vla:to-ename ${1:obj})"
],
"description":"object转ename,o2e\n 返回值:ename entity"
},
"word:close": {
"prefix" : "word:close",
"body": [
"(word:close ${1:ax-doc})"
],
"description":"关闭 word 文档"
},
"word:example": {
"prefix" : "word:example",
"body": [
"(word:example ${1:filename} ${2:str})"
],
"description":"word 类函数调用示例\n 返回值:nil"
},
"word:new": {
"prefix" : "word:new",
"body": [
"(word:new ${1:ishide})"
],
"description":"新建word 文档\n 参数:ishide:是否可见，t为可见，nil为不可见\n 返回值:一个表示word的vla对象"
},
"word:open": {
"prefix" : "word:open",
"body": [
"(word:open ${1:filename} ${2:ishide})"
],
"description":"打开一个word文件\n 参数:Filename:文件路径\n 参数:ishide:是否可见，t为可见，nil为不可见\n 返回值:一个表示打开的 word 文件的vla对象"
},
"word:quit": {
"prefix" : "word:quit",
"body": [
"(word:quit ${1:ax-word} ${2:saveyn})"
],
"description":"退出Word\n 参数:ax-word:打开的word对象\n 参数:SaveYN:是否保存，t为保存，nil为不保存"
},
"word:save": {
"prefix" : "word:save",
"body": [
"(word:save ${1:ax-doc})"
],
"description":"保存 word 文档，如果是新建的文档，需要先指定文件路径。"
},
"word:write-line": {
"prefix" : "word:write-line",
"body": [
"(word:write-line ${1:ax-doc} ${2:text})"
],
"description":"向 word 的文档对象最后写入文本。"
}
}
